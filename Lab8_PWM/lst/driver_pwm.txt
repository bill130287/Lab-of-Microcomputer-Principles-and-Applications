; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\driver_pwm.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\driver_pwm.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\CM0\CoreSupport -I.\Include\Driver -I.\Include\NUC1xx-LB_002 -I.\Src\Driver -I.\Src\NUC1xx-LB_002 -I.\CM0\DeviceSupport\Nuvoton\NUC1xx -I.\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x --omf_browse=.\obj\driver_pwm.crf Driver_PWM.c]
                          THUMB

                          AREA ||i.InitPWM||, CODE, READONLY, ALIGN=2

                  InitPWM PROC
;;;9      
;;;10     void InitPWM(uint8_t PWM_no)
000000  b500              PUSH     {lr}
;;;11     {
;;;12      	/* Step 1. GPIO initial */ 
;;;13     	switch (PWM_no) {
000002  0003              MOVS     r3,r0
000004  f7fffffe          BL       __ARM_common_switch8
000008  0805498f          DCB      0x08,0x05,0x49,0x8f
00000c  dafefdfc          DCB      0xda,0xfe,0xfd,0xfc
000010  fbfa              DCB      0xfb,0xfa
;;;14     		case 0 : SYS->GPAMFP.PWM0_AD13=1;     // Enable PWM0 multi-function pin
000012  2105              MOVS     r1,#5
000014  0709              LSLS     r1,r1,#28
000016  6b09              LDR      r1,[r1,#0x30]
000018  2201              MOVS     r2,#1
00001a  0312              LSLS     r2,r2,#12
00001c  4391              BICS     r1,r1,r2
00001e  1889              ADDS     r1,r1,r2
000020  2205              MOVS     r2,#5
000022  0712              LSLS     r2,r2,#28
000024  6311              STR      r1,[r2,#0x30]
;;;15                  SYSCLK->CLKSEL1.PWM01_S = 0; // Select 12Mhz for PWM clock source		
000026  49fa              LDR      r1,|L1.1040|
000028  6949              LDR      r1,[r1,#0x14]
00002a  2203              MOVS     r2,#3
00002c  0712              LSLS     r2,r2,#28
00002e  4391              BICS     r1,r1,r2
000030  4af7              LDR      r2,|L1.1040|
000032  6151              STR      r1,[r2,#0x14]
;;;16                  SYSCLK->APBCLK.PWM01_EN =1;  // Enable PWM0 & PWM1 clock	
000034  4611              MOV      r1,r2
000036  6889              LDR      r1,[r1,#8]
000038  02d2              LSLS     r2,r2,#11
00003a  4391              BICS     r1,r1,r2
00003c  1889              ADDS     r1,r1,r2
00003e  4af4              LDR      r2,|L1.1040|
000040  6091              STR      r1,[r2,#8]
;;;17     	           PWMA->PPR.CP01=1;			      // Prescaler 0~255, Setting 0 to stop output clock
000042  49f4              LDR      r1,|L1.1044|
000044  6809              LDR      r1,[r1,#0]
000046  0a09              LSRS     r1,r1,#8
000048  0209              LSLS     r1,r1,#8
00004a  1c49              ADDS     r1,r1,#1
00004c  4af1              LDR      r2,|L1.1044|
00004e  6011              STR      r1,[r2,#0]
;;;18     	           PWMA->CSR.CSR0=0;			      // PWM clock = clock source/(Prescaler + 1)/divider
000050  4611              MOV      r1,r2
000052  6849              LDR      r1,[r1,#4]
000054  08c9              LSRS     r1,r1,#3
000056  00c9              LSLS     r1,r1,#3
000058  6051              STR      r1,[r2,#4]
;;;19     	           PWMA->PCR.CH0MOD=1;			    // 0:One-shot mode, 1:Auto-load mode
00005a  4611              MOV      r1,r2
00005c  6889              LDR      r1,[r1,#8]
00005e  2208              MOVS     r2,#8
000060  4391              BICS     r1,r1,r2
000062  3108              ADDS     r1,r1,#8
000064  4aeb              LDR      r2,|L1.1044|
000066  6091              STR      r1,[r2,#8]
;;;20      								                          // CNR and CMR will be auto-cleared after setting CH0MOD form 0 to 1.	
;;;21     	           PWMA->CNR0=0xFFFF;           // CNR : counting down   // PWM output high if CMRx+1 >= CNR
000068  49eb              LDR      r1,|L1.1048|
00006a  60d1              STR      r1,[r2,#0xc]
;;;22     	           PWMA->CMR0=0xFFFF;		        // CMR : fix to compare  // PWM output low  if CMRx+1 <  CNR
00006c  6111              STR      r1,[r2,#0x10]
;;;23     	           PWMA->PCR.CH0INV=0;          // Inverter->0:off, 1:on
00006e  4611              MOV      r1,r2
000070  6889              LDR      r1,[r1,#8]
000072  2204              MOVS     r2,#4
000074  4391              BICS     r1,r1,r2
000076  4ae7              LDR      r2,|L1.1044|
000078  6091              STR      r1,[r2,#8]
;;;24     	           PWMA->PCR.CH0EN=1;			      // PWM function->0:Disable, 1:Enable
00007a  4611              MOV      r1,r2
00007c  6889              LDR      r1,[r1,#8]
00007e  0849              LSRS     r1,r1,#1
000080  0049              LSLS     r1,r1,#1
000082  1c49              ADDS     r1,r1,#1
000084  6091              STR      r1,[r2,#8]
;;;25       	         PWMA->POE.PWM0=1;			      // Output to pin->0:Diasble, 1:Enable		
000086  49e3              LDR      r1,|L1.1044|
000088  3140              ADDS     r1,r1,#0x40
00008a  6bc9              LDR      r1,[r1,#0x3c]
00008c  0849              LSRS     r1,r1,#1
00008e  0049              LSLS     r1,r1,#1
000090  1c49              ADDS     r1,r1,#1
000092  4ae0              LDR      r2,|L1.1044|
000094  3240              ADDS     r2,r2,#0x40
000096  63d1              STR      r1,[r2,#0x3c]
;;;26     		         break;
000098  e20d              B        |L1.1206|
;;;27     		case 1 : SYS->GPAMFP.PWM1_AD14=1;     // Enable PWM1 multi-function pin
00009a  2105              MOVS     r1,#5
00009c  0709              LSLS     r1,r1,#28
00009e  6b09              LDR      r1,[r1,#0x30]
0000a0  2201              MOVS     r2,#1
0000a2  0352              LSLS     r2,r2,#13
0000a4  4391              BICS     r1,r1,r2
0000a6  1889              ADDS     r1,r1,r2
0000a8  2205              MOVS     r2,#5
0000aa  0712              LSLS     r2,r2,#28
0000ac  6311              STR      r1,[r2,#0x30]
;;;28                  SYSCLK->CLKSEL1.PWM01_S = 0; // Select 12Mhz for PWM clock source		
0000ae  49d8              LDR      r1,|L1.1040|
0000b0  6949              LDR      r1,[r1,#0x14]
0000b2  2203              MOVS     r2,#3
0000b4  0712              LSLS     r2,r2,#28
0000b6  4391              BICS     r1,r1,r2
0000b8  4ad5              LDR      r2,|L1.1040|
0000ba  6151              STR      r1,[r2,#0x14]
;;;29                  SYSCLK->APBCLK.PWM01_EN =1;  // Enable PWM0 & PWM1 clock	
0000bc  4611              MOV      r1,r2
0000be  6889              LDR      r1,[r1,#8]
0000c0  02d2              LSLS     r2,r2,#11
0000c2  4391              BICS     r1,r1,r2
0000c4  1889              ADDS     r1,r1,r2
0000c6  4ad2              LDR      r2,|L1.1040|
0000c8  6091              STR      r1,[r2,#8]
;;;30     	           PWMA->PPR.CP01=1;			      // Prescaler 0~255, Setting 0 to stop output clock
0000ca  49d2              LDR      r1,|L1.1044|
0000cc  6809              LDR      r1,[r1,#0]
0000ce  0a09              LSRS     r1,r1,#8
0000d0  0209              LSLS     r1,r1,#8
0000d2  1c49              ADDS     r1,r1,#1
0000d4  4acf              LDR      r2,|L1.1044|
0000d6  6011              STR      r1,[r2,#0]
;;;31     	           PWMA->CSR.CSR1=0;			      // PWM clock = clock source/(Prescaler + 1)/divider
0000d8  4611              MOV      r1,r2
0000da  6849              LDR      r1,[r1,#4]
0000dc  2270              MOVS     r2,#0x70
0000de  4391              BICS     r1,r1,r2
0000e0  4acc              LDR      r2,|L1.1044|
0000e2  6051              STR      r1,[r2,#4]
;;;32     	           PWMA->PCR.CH1MOD=1;			    // 0:One-shot mode, 1:Auto-load mode
0000e4  4611              MOV      r1,r2
0000e6  6889              LDR      r1,[r1,#8]
0000e8  14d2              ASRS     r2,r2,#19
0000ea  4391              BICS     r1,r1,r2
0000ec  1889              ADDS     r1,r1,r2
0000ee  4ac9              LDR      r2,|L1.1044|
0000f0  6091              STR      r1,[r2,#8]
;;;33     								                          // CNR and CMR will be auto-cleared after setting CH1MOD form 0 to 1.	
;;;34     	           PWMA->CNR1=0xFFFF;           // CNR : counting down   // PWM output high if CMRx+1 >= CNR
0000f2  49c9              LDR      r1,|L1.1048|
0000f4  6191              STR      r1,[r2,#0x18]
;;;35     	           PWMA->CMR1=0xFFFF;		        // CMR : fix to compare  // PWM output low  if CMRx+1 <  CNR		
0000f6  61d1              STR      r1,[r2,#0x1c]
;;;36     	           PWMA->PCR.CH1INV=0;          // Inverter->0:off, 1:on
0000f8  4611              MOV      r1,r2
0000fa  6889              LDR      r1,[r1,#8]
0000fc  1512              ASRS     r2,r2,#20
0000fe  4391              BICS     r1,r1,r2
000100  4ac4              LDR      r2,|L1.1044|
000102  6091              STR      r1,[r2,#8]
;;;37     	           PWMA->PCR.CH1EN=1;			      // PWM function->0:Disable, 1:Enable
000104  4611              MOV      r1,r2
000106  6889              LDR      r1,[r1,#8]
000108  1592              ASRS     r2,r2,#22
00010a  4391              BICS     r1,r1,r2
00010c  1889              ADDS     r1,r1,r2
00010e  4ac1              LDR      r2,|L1.1044|
000110  6091              STR      r1,[r2,#8]
;;;38       	         PWMA->POE.PWM1=1;			      // Output to pin->0:Diasble, 1:Enable							 
000112  49c0              LDR      r1,|L1.1044|
000114  3140              ADDS     r1,r1,#0x40
000116  6bc9              LDR      r1,[r1,#0x3c]
000118  2202              MOVS     r2,#2
00011a  4391              BICS     r1,r1,r2
00011c  1c89              ADDS     r1,r1,#2
00011e  4abd              LDR      r2,|L1.1044|
000120  3240              ADDS     r2,r2,#0x40
000122  63d1              STR      r1,[r2,#0x3c]
;;;39     						 break;
000124  e1c7              B        |L1.1206|
;;;40     		case 2 : SYS->GPAMFP.PWM2_AD15=1;     // Enable PWM2 multi-function pin
000126  2105              MOVS     r1,#5
000128  0709              LSLS     r1,r1,#28
00012a  6b09              LDR      r1,[r1,#0x30]
00012c  2201              MOVS     r2,#1
00012e  0392              LSLS     r2,r2,#14
000130  4391              BICS     r1,r1,r2
000132  1889              ADDS     r1,r1,r2
000134  2205              MOVS     r2,#5
000136  0712              LSLS     r2,r2,#28
000138  6311              STR      r1,[r2,#0x30]
;;;41                  SYSCLK->CLKSEL1.PWM23_S = 0; // Select 12Mhz for PWM clock source		
00013a  49b5              LDR      r1,|L1.1040|
00013c  6949              LDR      r1,[r1,#0x14]
00013e  0089              LSLS     r1,r1,#2
000140  0889              LSRS     r1,r1,#2
000142  4ab3              LDR      r2,|L1.1040|
000144  6151              STR      r1,[r2,#0x14]
;;;42                  SYSCLK->APBCLK.PWM23_EN =1;  // Enable PWM2 & PWM3 clock	
000146  4611              MOV      r1,r2
000148  6889              LDR      r1,[r1,#8]
00014a  0312              LSLS     r2,r2,#12
00014c  4391              BICS     r1,r1,r2
00014e  1889              ADDS     r1,r1,r2
000150  4aaf              LDR      r2,|L1.1040|
000152  6091              STR      r1,[r2,#8]
;;;43     	           PWMA->PPR.CP23=1;			      // Prescaler 0~255, Setting 0 to stop output clock
000154  49af              LDR      r1,|L1.1044|
000156  6809              LDR      r1,[r1,#0]
000158  22ff              MOVS     r2,#0xff
00015a  0212              LSLS     r2,r2,#8
00015c  4391              BICS     r1,r1,r2
00015e  31ff              ADDS     r1,r1,#0xff
000160  3101              ADDS     r1,#1
000162  4aac              LDR      r2,|L1.1044|
000164  6011              STR      r1,[r2,#0]
;;;44     	           PWMA->CSR.CSR2=0;			      // PWM clock = clock source/(Prescaler + 1)/divider
000166  4611              MOV      r1,r2
000168  6849              LDR      r1,[r1,#4]
00016a  2207              MOVS     r2,#7
00016c  0212              LSLS     r2,r2,#8
00016e  4391              BICS     r1,r1,r2
000170  4aa8              LDR      r2,|L1.1044|
000172  6051              STR      r1,[r2,#4]
;;;45     	           PWMA->PCR.CH2MOD=1;			    // 0:One-shot mode, 1:Auto-load mode
000174  4611              MOV      r1,r2
000176  6889              LDR      r1,[r1,#8]
000178  2201              MOVS     r2,#1
00017a  04d2              LSLS     r2,r2,#19
00017c  4391              BICS     r1,r1,r2
00017e  1889              ADDS     r1,r1,r2
000180  4aa4              LDR      r2,|L1.1044|
000182  6091              STR      r1,[r2,#8]
;;;46     								                          // CNR and CMR will be auto-cleared after setting CH2MOD form 0 to 1.	
;;;47     	           PWMA->CNR2=0xFFFF;           // CNR : counting down   // PWM output high if CMRx+1 >= CNR
000184  49a4              LDR      r1,|L1.1048|
000186  6251              STR      r1,[r2,#0x24]
;;;48     	           PWMA->CMR2=0xFFFF;		        // CMR : fix to compare  // PWM output low  if CMRx+1 <  CNR
000188  6291              STR      r1,[r2,#0x28]
;;;49     	           PWMA->PCR.CH2INV=0;          // Inverter->0:off, 1:on
00018a  4611              MOV      r1,r2
00018c  6889              LDR      r1,[r1,#8]
00018e  2201              MOVS     r2,#1
000190  0492              LSLS     r2,r2,#18
000192  4391              BICS     r1,r1,r2
000194  4a9f              LDR      r2,|L1.1044|
000196  6091              STR      r1,[r2,#8]
;;;50     	           PWMA->PCR.CH2EN=1;			      // PWM function->0:Disable, 1:Enable
000198  4611              MOV      r1,r2
00019a  6889              LDR      r1,[r1,#8]
00019c  2201              MOVS     r2,#1
00019e  0412              LSLS     r2,r2,#16
0001a0  4391              BICS     r1,r1,r2
0001a2  1889              ADDS     r1,r1,r2
0001a4  4a9b              LDR      r2,|L1.1044|
0001a6  6091              STR      r1,[r2,#8]
;;;51       	         PWMA->POE.PWM2=1;			      // Output to pin->0:Diasble, 1:Enable						 
0001a8  499a              LDR      r1,|L1.1044|
0001aa  3140              ADDS     r1,r1,#0x40
0001ac  6bc9              LDR      r1,[r1,#0x3c]
0001ae  2204              MOVS     r2,#4
0001b0  4391              BICS     r1,r1,r2
0001b2  1d09              ADDS     r1,r1,#4
0001b4  4a97              LDR      r2,|L1.1044|
0001b6  3240              ADDS     r2,r2,#0x40
0001b8  63d1              STR      r1,[r2,#0x3c]
;;;52     		         break;						 
0001ba  e17c              B        |L1.1206|
;;;53     		case 3 : SYS->GPAMFP.PWM3_I2SMCLK=1;  // Enable PWM3 multi-function pin
0001bc  2105              MOVS     r1,#5
0001be  0709              LSLS     r1,r1,#28
0001c0  6b09              LDR      r1,[r1,#0x30]
0001c2  2201              MOVS     r2,#1
0001c4  03d2              LSLS     r2,r2,#15
0001c6  4391              BICS     r1,r1,r2
0001c8  1889              ADDS     r1,r1,r2
0001ca  2205              MOVS     r2,#5
0001cc  0712              LSLS     r2,r2,#28
0001ce  6311              STR      r1,[r2,#0x30]
;;;54                  SYSCLK->CLKSEL1.PWM23_S = 0; // Select 12Mhz for PWM clock source		
0001d0  498f              LDR      r1,|L1.1040|
0001d2  6949              LDR      r1,[r1,#0x14]
0001d4  0089              LSLS     r1,r1,#2
0001d6  0889              LSRS     r1,r1,#2
0001d8  4a8d              LDR      r2,|L1.1040|
0001da  6151              STR      r1,[r2,#0x14]
;;;55                  SYSCLK->APBCLK.PWM23_EN =1;  // Enable PWM2 & PWM3 clock	
0001dc  4611              MOV      r1,r2
0001de  6889              LDR      r1,[r1,#8]
0001e0  0312              LSLS     r2,r2,#12
0001e2  4391              BICS     r1,r1,r2
0001e4  1889              ADDS     r1,r1,r2
0001e6  4a8a              LDR      r2,|L1.1040|
0001e8  6091              STR      r1,[r2,#8]
;;;56     	           PWMA->PPR.CP23=1;			      // Prescaler 0~255, Setting 0 to stop output clock
0001ea  498a              LDR      r1,|L1.1044|
0001ec  6809              LDR      r1,[r1,#0]
0001ee  22ff              MOVS     r2,#0xff
0001f0  0212              LSLS     r2,r2,#8
0001f2  4391              BICS     r1,r1,r2
0001f4  31ff              ADDS     r1,r1,#0xff
0001f6  3101              ADDS     r1,#1
0001f8  4a86              LDR      r2,|L1.1044|
0001fa  e004              B        |L1.518|
0001fc  e15a              B        |L1.1204|
0001fe  e111              B        |L1.1060|
000200  e0be              B        |L1.896|
000202  e072              B        |L1.746|
000204  e028              B        |L1.600|
                  |L1.518|
000206  6011              STR      r1,[r2,#0]
;;;57     	           PWMA->CSR.CSR3=0;			      // PWM clock = clock source/(Prescaler + 1)/divider
000208  4611              MOV      r1,r2
00020a  6849              LDR      r1,[r1,#4]
00020c  2207              MOVS     r2,#7
00020e  0312              LSLS     r2,r2,#12
000210  4391              BICS     r1,r1,r2
000212  4a80              LDR      r2,|L1.1044|
000214  6051              STR      r1,[r2,#4]
;;;58     	           PWMA->PCR.CH3MOD=1;			    // 0:One-shot mode, 1:Auto-load mode
000216  4611              MOV      r1,r2
000218  6889              LDR      r1,[r1,#8]
00021a  0252              LSLS     r2,r2,#9
00021c  4391              BICS     r1,r1,r2
00021e  1889              ADDS     r1,r1,r2
000220  4a7c              LDR      r2,|L1.1044|
000222  6091              STR      r1,[r2,#8]
;;;59     								                          // CNR and CMR will be auto-cleared after setting CH2MOD form 0 to 1.	
;;;60     	           PWMA->CNR3=0xFFFF;           // CNR : counting down   // PWM output high if CMRx+1 >= CNR
000224  497c              LDR      r1,|L1.1048|
000226  6311              STR      r1,[r2,#0x30]
;;;61     	           PWMA->CMR3=0xFFFF;		        // CMR : fix to compare  // PWM output low  if CMRx+1 <  CNR
000228  6351              STR      r1,[r2,#0x34]
;;;62     	           PWMA->PCR.CH3INV=0;          // Inverter->0:off, 1:on
00022a  4611              MOV      r1,r2
00022c  6889              LDR      r1,[r1,#8]
00022e  0212              LSLS     r2,r2,#8
000230  4391              BICS     r1,r1,r2
000232  4a78              LDR      r2,|L1.1044|
000234  6091              STR      r1,[r2,#8]
;;;63     	           PWMA->PCR.CH3EN=1;			      // PWM function->0:Disable, 1:Enable
000236  4611              MOV      r1,r2
000238  6889              LDR      r1,[r1,#8]
00023a  0192              LSLS     r2,r2,#6
00023c  4391              BICS     r1,r1,r2
00023e  1889              ADDS     r1,r1,r2
000240  4a74              LDR      r2,|L1.1044|
000242  6091              STR      r1,[r2,#8]
;;;64       	         PWMA->POE.PWM3=1;			      // Output to pin->0:Diasble, 1:Enable						 
000244  4973              LDR      r1,|L1.1044|
000246  3140              ADDS     r1,r1,#0x40
000248  6bc9              LDR      r1,[r1,#0x3c]
00024a  2208              MOVS     r2,#8
00024c  4391              BICS     r1,r1,r2
00024e  3108              ADDS     r1,r1,#8
000250  4a70              LDR      r2,|L1.1044|
000252  3240              ADDS     r2,r2,#0x40
000254  63d1              STR      r1,[r2,#0x3c]
;;;65     		         break;  
000256  e12e              B        |L1.1206|
                  |L1.600|
;;;66     		case 4 : SYS->GPBMFP.TM3_PWM4=1;      // Enable PWM0 multi-function pin
000258  2105              MOVS     r1,#5
00025a  0709              LSLS     r1,r1,#28
00025c  6b49              LDR      r1,[r1,#0x34]
00025e  2201              MOVS     r2,#1
000260  02d2              LSLS     r2,r2,#11
000262  4391              BICS     r1,r1,r2
000264  1889              ADDS     r1,r1,r2
000266  2205              MOVS     r2,#5
000268  0712              LSLS     r2,r2,#28
00026a  6351              STR      r1,[r2,#0x34]
;;;67                  SYSCLK->CLKSEL2.PWM45_S = 0; // Select 12Mhz for PWM clock source		
00026c  4968              LDR      r1,|L1.1040|
00026e  69c9              LDR      r1,[r1,#0x1c]
000270  2230              MOVS     r2,#0x30
000272  4391              BICS     r1,r1,r2
000274  4a66              LDR      r2,|L1.1040|
000276  61d1              STR      r1,[r2,#0x1c]
;;;68                  SYSCLK->APBCLK.PWM45_EN =1;  // Enable PWM0 & PWM1 clock
000278  4611              MOV      r1,r2
00027a  6889              LDR      r1,[r1,#8]
00027c  0352              LSLS     r2,r2,#13
00027e  4391              BICS     r1,r1,r2
000280  1889              ADDS     r1,r1,r2
000282  4a63              LDR      r2,|L1.1040|
000284  6091              STR      r1,[r2,#8]
;;;69     						 *((unsigned int *)(GCR_BASE+0x50))|=0x10; // This is a bug, it should be added. This code is coded by Allen Hsu. 
000286  4965              LDR      r1,|L1.1052|
000288  6909              LDR      r1,[r1,#0x10]
00028a  2210              MOVS     r2,#0x10
00028c  4311              ORRS     r1,r1,r2
00028e  4a63              LDR      r2,|L1.1052|
000290  6111              STR      r1,[r2,#0x10]
;;;70     	           PWMB->PPR.CP01=1;			      // Prescaler 0~255, Setting 0 to stop output clock
000292  4963              LDR      r1,|L1.1056|
000294  6809              LDR      r1,[r1,#0]
000296  0a09              LSRS     r1,r1,#8
000298  0209              LSLS     r1,r1,#8
00029a  1c49              ADDS     r1,r1,#1
00029c  4a60              LDR      r2,|L1.1056|
00029e  6011              STR      r1,[r2,#0]
;;;71     	           PWMB->CSR.CSR0=0;			      // PWM clock = clock source/(Prescaler + 1)/divider
0002a0  4611              MOV      r1,r2
0002a2  6849              LDR      r1,[r1,#4]
0002a4  08c9              LSRS     r1,r1,#3
0002a6  00c9              LSLS     r1,r1,#3
0002a8  6051              STR      r1,[r2,#4]
;;;72     	           PWMB->PCR.CH0MOD=1;			    // 0:One-shot mode, 1:Auto-load mode
0002aa  4611              MOV      r1,r2
0002ac  6889              LDR      r1,[r1,#8]
0002ae  2208              MOVS     r2,#8
0002b0  4391              BICS     r1,r1,r2
0002b2  3108              ADDS     r1,r1,#8
0002b4  4a5a              LDR      r2,|L1.1056|
0002b6  6091              STR      r1,[r2,#8]
;;;73      								                          // CNR and CMR will be auto-cleared after setting CH0MOD form 0 to 1.	
;;;74     	           PWMB->CNR0=0xFFFF;           // CNR : counting down   // PWM output high if CMRx+1 >= CNR
0002b8  4957              LDR      r1,|L1.1048|
0002ba  60d1              STR      r1,[r2,#0xc]
;;;75     	           PWMB->CMR0=0xFFFF;		        // CMR : fix to compare  // PWM output low  if CMRx+1 <  CNR
0002bc  6111              STR      r1,[r2,#0x10]
;;;76     	           PWMB->PCR.CH0INV=0;          // Inverter->0:off, 1:on
0002be  4611              MOV      r1,r2
0002c0  6889              LDR      r1,[r1,#8]
0002c2  2204              MOVS     r2,#4
0002c4  4391              BICS     r1,r1,r2
0002c6  4a56              LDR      r2,|L1.1056|
0002c8  6091              STR      r1,[r2,#8]
;;;77     	           PWMB->PCR.CH0EN=1;			      // PWM function->0:Disable, 1:Enable
0002ca  4611              MOV      r1,r2
0002cc  6889              LDR      r1,[r1,#8]
0002ce  0849              LSRS     r1,r1,#1
0002d0  0049              LSLS     r1,r1,#1
0002d2  1c49              ADDS     r1,r1,#1
0002d4  6091              STR      r1,[r2,#8]
;;;78       	         PWMB->POE.PWM0=1;			      // Output to pin->0:Diasble, 1:Enable		
0002d6  4952              LDR      r1,|L1.1056|
0002d8  3140              ADDS     r1,r1,#0x40
0002da  6bc9              LDR      r1,[r1,#0x3c]
0002dc  0849              LSRS     r1,r1,#1
0002de  0049              LSLS     r1,r1,#1
0002e0  1c49              ADDS     r1,r1,#1
0002e2  4a4f              LDR      r2,|L1.1056|
0002e4  3240              ADDS     r2,r2,#0x40
0002e6  63d1              STR      r1,[r2,#0x3c]
;;;79     		         break; 
0002e8  e0e5              B        |L1.1206|
                  |L1.746|
;;;80     		case 5 : SYS->GPEMFP.PWM5=1;          // Enable PWM5 multi-function pin
0002ea  494c              LDR      r1,|L1.1052|
0002ec  6809              LDR      r1,[r1,#0]
0002ee  2220              MOVS     r2,#0x20
0002f0  4391              BICS     r1,r1,r2
0002f2  3120              ADDS     r1,r1,#0x20
0002f4  4a49              LDR      r2,|L1.1052|
0002f6  6011              STR      r1,[r2,#0]
;;;81     		         SYSCLK->APBCLK.PWM45_EN = 1; // Enable PWM45 clock
0002f8  4945              LDR      r1,|L1.1040|
0002fa  6889              LDR      r1,[r1,#8]
0002fc  0412              LSLS     r2,r2,#16
0002fe  4391              BICS     r1,r1,r2
000300  1889              ADDS     r1,r1,r2
000302  4a43              LDR      r2,|L1.1040|
000304  6091              STR      r1,[r2,#8]
;;;82                  SYSCLK->CLKSEL2.PWM45_S = 0; // Select 12Mhz for PWM clock source		
000306  4611              MOV      r1,r2
000308  69c9              LDR      r1,[r1,#0x1c]
00030a  2230              MOVS     r2,#0x30
00030c  4391              BICS     r1,r1,r2
00030e  4a40              LDR      r2,|L1.1040|
000310  61d1              STR      r1,[r2,#0x1c]
;;;83                  SYSCLK->APBCLK.PWM45_EN =1;  // Enable PWM4 & PWM5 clock	
000312  4611              MOV      r1,r2
000314  6889              LDR      r1,[r1,#8]
000316  0352              LSLS     r2,r2,#13
000318  4391              BICS     r1,r1,r2
00031a  1889              ADDS     r1,r1,r2
00031c  4a3c              LDR      r2,|L1.1040|
00031e  6091              STR      r1,[r2,#8]
;;;84     	           PWMB->PPR.CP01=1;			      // Prescaler 0~255, Setting 0 to stop output clock
000320  493f              LDR      r1,|L1.1056|
000322  6809              LDR      r1,[r1,#0]
000324  0a09              LSRS     r1,r1,#8
000326  0209              LSLS     r1,r1,#8
000328  1c49              ADDS     r1,r1,#1
00032a  4a3d              LDR      r2,|L1.1056|
00032c  6011              STR      r1,[r2,#0]
;;;85     	           PWMB->CSR.CSR1=0;			      // PWM clock = clock source/(Prescaler + 1)/divider
00032e  4611              MOV      r1,r2
000330  6849              LDR      r1,[r1,#4]
000332  2270              MOVS     r2,#0x70
000334  4391              BICS     r1,r1,r2
000336  4a3a              LDR      r2,|L1.1056|
000338  6051              STR      r1,[r2,#4]
;;;86     	           PWMB->PCR.CH1MOD=1;			    // 0:One-shot mode, 1:Auto-load mode
00033a  4611              MOV      r1,r2
00033c  6889              LDR      r1,[r1,#8]
00033e  2201              MOVS     r2,#1
000340  02d2              LSLS     r2,r2,#11
000342  4391              BICS     r1,r1,r2
000344  1889              ADDS     r1,r1,r2
000346  4a36              LDR      r2,|L1.1056|
000348  6091              STR      r1,[r2,#8]
;;;87     								                          // CNR and CMR will be auto-cleared after setting CH1MOD form 0 to 1.	
;;;88     	           PWMB->CNR1=0xFFFF;           // CNR : counting down   // PWM output high if CMRx+1 >= CNR
00034a  4933              LDR      r1,|L1.1048|
00034c  6191              STR      r1,[r2,#0x18]
;;;89     	           PWMB->CMR1=0xFFFF;		        // CMR : fix to compare  // PWM output low  if CMRx+1 <  CNR		
00034e  61d1              STR      r1,[r2,#0x1c]
;;;90     	           PWMB->PCR.CH1INV=0;          // Inverter->0:off, 1:on
000350  4611              MOV      r1,r2
000352  6889              LDR      r1,[r1,#8]
000354  2201              MOVS     r2,#1
000356  0292              LSLS     r2,r2,#10
000358  4391              BICS     r1,r1,r2
00035a  4a31              LDR      r2,|L1.1056|
00035c  6091              STR      r1,[r2,#8]
;;;91     	           PWMB->PCR.CH1EN=1;			      // PWM function->0:Disable, 1:Enable
00035e  4611              MOV      r1,r2
000360  6889              LDR      r1,[r1,#8]
000362  1592              ASRS     r2,r2,#22
000364  4391              BICS     r1,r1,r2
000366  1889              ADDS     r1,r1,r2
000368  4a2d              LDR      r2,|L1.1056|
00036a  6091              STR      r1,[r2,#8]
;;;92       	         PWMB->POE.PWM1=1;			      // Output to pin->0:Diasble, 1:Enable							 
00036c  492c              LDR      r1,|L1.1056|
00036e  3140              ADDS     r1,r1,#0x40
000370  6bc9              LDR      r1,[r1,#0x3c]
000372  2202              MOVS     r2,#2
000374  4391              BICS     r1,r1,r2
000376  1c89              ADDS     r1,r1,#2
000378  4a29              LDR      r2,|L1.1056|
00037a  3240              ADDS     r2,r2,#0x40
00037c  63d1              STR      r1,[r2,#0x3c]
;;;93     						 break;
00037e  e09a              B        |L1.1206|
                  |L1.896|
;;;94     		case 6 : SYS->GPEMFP.PWM6=1;          // Enable PWM2 multi-function pin
000380  4926              LDR      r1,|L1.1052|
000382  6809              LDR      r1,[r1,#0]
000384  0849              LSRS     r1,r1,#1
000386  0049              LSLS     r1,r1,#1
000388  1c49              ADDS     r1,r1,#1
00038a  4a24              LDR      r2,|L1.1052|
00038c  6011              STR      r1,[r2,#0]
;;;95                  SYSCLK->CLKSEL2.PWM67_S = 0; // Select 12Mhz for PWM clock source		
00038e  4920              LDR      r1,|L1.1040|
000390  69c9              LDR      r1,[r1,#0x1c]
000392  22c0              MOVS     r2,#0xc0
000394  4391              BICS     r1,r1,r2
000396  4a1e              LDR      r2,|L1.1040|
000398  61d1              STR      r1,[r2,#0x1c]
;;;96                  SYSCLK->APBCLK.PWM67_EN =1;  // Enable PWM2 & PWM3 clock	
00039a  4611              MOV      r1,r2
00039c  6889              LDR      r1,[r1,#8]
00039e  0392              LSLS     r2,r2,#14
0003a0  4391              BICS     r1,r1,r2
0003a2  1889              ADDS     r1,r1,r2
0003a4  4a1a              LDR      r2,|L1.1040|
0003a6  6091              STR      r1,[r2,#8]
;;;97     	           PWMB->PPR.CP23=1;			      // Prescaler 0~255, Setting 0 to stop output clock
0003a8  491d              LDR      r1,|L1.1056|
0003aa  6809              LDR      r1,[r1,#0]
0003ac  22ff              MOVS     r2,#0xff
0003ae  0212              LSLS     r2,r2,#8
0003b0  4391              BICS     r1,r1,r2
0003b2  31ff              ADDS     r1,r1,#0xff
0003b4  3101              ADDS     r1,#1
0003b6  4a1a              LDR      r2,|L1.1056|
0003b8  6011              STR      r1,[r2,#0]
;;;98     	           PWMB->CSR.CSR2=0;			      // PWM clock = clock source/(Prescaler + 1)/divider
0003ba  4611              MOV      r1,r2
0003bc  6849              LDR      r1,[r1,#4]
0003be  2207              MOVS     r2,#7
0003c0  0212              LSLS     r2,r2,#8
0003c2  4391              BICS     r1,r1,r2
0003c4  4a16              LDR      r2,|L1.1056|
0003c6  6051              STR      r1,[r2,#4]
;;;99     	           PWMB->PCR.CH2MOD=1;			    // 0:One-shot mode, 1:Auto-load mode
0003c8  4611              MOV      r1,r2
0003ca  6889              LDR      r1,[r1,#8]
0003cc  2201              MOVS     r2,#1
0003ce  04d2              LSLS     r2,r2,#19
0003d0  4391              BICS     r1,r1,r2
0003d2  1889              ADDS     r1,r1,r2
0003d4  4a12              LDR      r2,|L1.1056|
0003d6  6091              STR      r1,[r2,#8]
;;;100    								                          // CNR and CMR will be auto-cleared after setting CH2MOD form 0 to 1.	
;;;101    	           PWMB->CNR2=0xFFFF;           // CNR : counting down   // PWM output high if CMRx+1 >= CNR
0003d8  490f              LDR      r1,|L1.1048|
0003da  6251              STR      r1,[r2,#0x24]
;;;102    	           PWMB->CMR2=0xFFFF;		        // CMR : fix to compare  // PWM output low  if CMRx+1 <  CNR
0003dc  6291              STR      r1,[r2,#0x28]
;;;103    	           PWMB->PCR.CH2INV=0;          // Inverter->0:off, 1:on
0003de  4611              MOV      r1,r2
0003e0  6889              LDR      r1,[r1,#8]
0003e2  2201              MOVS     r2,#1
0003e4  0492              LSLS     r2,r2,#18
0003e6  4391              BICS     r1,r1,r2
0003e8  4a0d              LDR      r2,|L1.1056|
0003ea  6091              STR      r1,[r2,#8]
;;;104    	           PWMB->PCR.CH2EN=1;			      // PWM function->0:Disable, 1:Enable
0003ec  4611              MOV      r1,r2
0003ee  6889              LDR      r1,[r1,#8]
0003f0  2201              MOVS     r2,#1
0003f2  0412              LSLS     r2,r2,#16
0003f4  4391              BICS     r1,r1,r2
0003f6  1889              ADDS     r1,r1,r2
0003f8  4a09              LDR      r2,|L1.1056|
0003fa  6091              STR      r1,[r2,#8]
;;;105      	         PWMB->POE.PWM2=1;			      // Output to pin->0:Diasble, 1:Enable						 
0003fc  4908              LDR      r1,|L1.1056|
0003fe  3140              ADDS     r1,r1,#0x40
000400  6bc9              LDR      r1,[r1,#0x3c]
000402  2204              MOVS     r2,#4
000404  4391              BICS     r1,r1,r2
000406  1d09              ADDS     r1,r1,#4
000408  4a05              LDR      r2,|L1.1056|
00040a  3240              ADDS     r2,r2,#0x40
00040c  63d1              STR      r1,[r2,#0x3c]
;;;106    		         break;							 
00040e  e052              B        |L1.1206|
                  |L1.1040|
                          DCD      0x50000200
                  |L1.1044|
                          DCD      0x40040000
                  |L1.1048|
                          DCD      0x0000ffff
                  |L1.1052|
                          DCD      0x50000040
                  |L1.1056|
                          DCD      0x40140000
                  |L1.1060|
;;;107    		case 7 : SYS->GPEMFP.PWM7=1;          // Enable PWM3 multi-function pin
000424  4925              LDR      r1,|L1.1212|
000426  6809              LDR      r1,[r1,#0]
000428  2202              MOVS     r2,#2
00042a  4391              BICS     r1,r1,r2
00042c  1c89              ADDS     r1,r1,#2
00042e  4a23              LDR      r2,|L1.1212|
000430  6011              STR      r1,[r2,#0]
;;;108                 SYSCLK->CLKSEL2.PWM67_S = 0; // Select 12Mhz for PWM clock source		
000432  4923              LDR      r1,|L1.1216|
000434  69c9              LDR      r1,[r1,#0x1c]
000436  22c0              MOVS     r2,#0xc0
000438  4391              BICS     r1,r1,r2
00043a  4a21              LDR      r2,|L1.1216|
00043c  61d1              STR      r1,[r2,#0x1c]
;;;109                 SYSCLK->APBCLK.PWM67_EN =1;  // Enable PWM2 & PWM3 clock	
00043e  4611              MOV      r1,r2
000440  6889              LDR      r1,[r1,#8]
000442  0392              LSLS     r2,r2,#14
000444  4391              BICS     r1,r1,r2
000446  1889              ADDS     r1,r1,r2
000448  4a1d              LDR      r2,|L1.1216|
00044a  6091              STR      r1,[r2,#8]
;;;110    	           PWMB->PPR.CP23=1;			      // Prescaler 0~255, Setting 0 to stop output clock
00044c  491d              LDR      r1,|L1.1220|
00044e  6809              LDR      r1,[r1,#0]
000450  22ff              MOVS     r2,#0xff
000452  0212              LSLS     r2,r2,#8
000454  4391              BICS     r1,r1,r2
000456  31ff              ADDS     r1,r1,#0xff
000458  3101              ADDS     r1,#1
00045a  4a1a              LDR      r2,|L1.1220|
00045c  6011              STR      r1,[r2,#0]
;;;111    	           PWMB->CSR.CSR3=0;			      // PWM clock = clock source/(Prescaler + 1)/divider
00045e  4611              MOV      r1,r2
000460  6849              LDR      r1,[r1,#4]
000462  2207              MOVS     r2,#7
000464  0312              LSLS     r2,r2,#12
000466  4391              BICS     r1,r1,r2
000468  4a16              LDR      r2,|L1.1220|
00046a  6051              STR      r1,[r2,#4]
;;;112    	           PWMB->PCR.CH3MOD=1;			    // 0:One-shot mode, 1:Auto-load mode
00046c  4611              MOV      r1,r2
00046e  6889              LDR      r1,[r1,#8]
000470  2201              MOVS     r2,#1
000472  06d2              LSLS     r2,r2,#27
000474  4391              BICS     r1,r1,r2
000476  1889              ADDS     r1,r1,r2
000478  4a12              LDR      r2,|L1.1220|
00047a  6091              STR      r1,[r2,#8]
;;;113    								                          // CNR and CMR will be auto-cleared after setting CH2MOD form 0 to 1.	
;;;114    	           PWMB->CNR3=0xFFFF;           // CNR : counting down   // PWM output high if CMRx+1 >= CNR
00047c  4912              LDR      r1,|L1.1224|
00047e  6311              STR      r1,[r2,#0x30]
;;;115    	           PWMB->CMR3=0xFFFF;		        // CMR : fix to compare  // PWM output low  if CMRx+1 <  CNR
000480  6351              STR      r1,[r2,#0x34]
;;;116    	           PWMB->PCR.CH3INV=0;          // Inverter->0:off, 1:on
000482  4611              MOV      r1,r2
000484  6889              LDR      r1,[r1,#8]
000486  2201              MOVS     r2,#1
000488  0692              LSLS     r2,r2,#26
00048a  4391              BICS     r1,r1,r2
00048c  4a0d              LDR      r2,|L1.1220|
00048e  6091              STR      r1,[r2,#8]
;;;117    	           PWMB->PCR.CH3EN=1;			      // PWM function->0:Disable, 1:Enable
000490  4611              MOV      r1,r2
000492  6889              LDR      r1,[r1,#8]
000494  2201              MOVS     r2,#1
000496  0612              LSLS     r2,r2,#24
000498  4391              BICS     r1,r1,r2
00049a  1889              ADDS     r1,r1,r2
00049c  4a09              LDR      r2,|L1.1220|
00049e  6091              STR      r1,[r2,#8]
;;;118      	         PWMB->POE.PWM3=1;			      // Output to pin->0:Diasble, 1:Enable						 
0004a0  4908              LDR      r1,|L1.1220|
0004a2  3140              ADDS     r1,r1,#0x40
0004a4  6bc9              LDR      r1,[r1,#0x3c]
0004a6  2208              MOVS     r2,#8
0004a8  4391              BICS     r1,r1,r2
0004aa  3108              ADDS     r1,r1,#8
0004ac  4a05              LDR      r2,|L1.1220|
0004ae  3240              ADDS     r2,r2,#0x40
0004b0  63d1              STR      r1,[r2,#0x3c]
;;;119    		         break;
0004b2  e000              B        |L1.1206|
                  |L1.1204|
;;;120    		default :break;
0004b4  bf00              NOP      
                  |L1.1206|
0004b6  bf00              NOP                            ;26
;;;121    	}
;;;122    }
0004b8  bd00              POP      {pc}
;;;123    
                          ENDP

0004ba  0000              DCW      0x0000
                  |L1.1212|
                          DCD      0x50000040
                  |L1.1216|
                          DCD      0x50000200
                  |L1.1220|
                          DCD      0x40140000
                  |L1.1224|
                          DCD      0x0000ffff

                          AREA ||i.PWM_Freq||, CODE, READONLY, ALIGN=2

                  PWM_Freq PROC
;;;123    
;;;124    void PWM_Freq(uint8_t PWM_no, uint32_t PWM_freq, uint8_t PWM_duty)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;125    {
000002  b084              SUB      sp,sp,#0x10
000004  460d              MOV      r5,r1
;;;126    	uint32_t PWM_Clock;
;;;127    	uint8_t  PWM_PreScaler;
;;;128    	uint16_t PWM_ClockDivider;
;;;129    	uint16_t CNR, CMR;
;;;130    
;;;131    	switch(PWM_no) {
000006  9804              LDR      r0,[sp,#0x10]
000008  0003              MOVS     r3,r0
00000a  f7fffffe          BL       __ARM_common_switch8
00000e  0805              DCB      0x08,0x05
000010  16273849          DCB      0x16,0x27,0x38,0x49
000014  5a6b7c8d          DCB      0x5a,0x6b,0x7c,0x8d
;;;132    		case 0 : if (PWM_freq==0) PWMA->POE.PWM0=0;
000018  2d00              CMP      r5,#0
00001a  d106              BNE      |L2.42|
00001c  48d0              LDR      r0,|L2.864|
00001e  6bc0              LDR      r0,[r0,#0x3c]
000020  0840              LSRS     r0,r0,#1
000022  0040              LSLS     r0,r0,#1
000024  49ce              LDR      r1,|L2.864|
000026  63c8              STR      r0,[r1,#0x3c]
000028  e006              B        |L2.56|
                  |L2.42|
;;;133    	           else             PWMA->POE.PWM0=1;
00002a  48cd              LDR      r0,|L2.864|
00002c  6bc0              LDR      r0,[r0,#0x3c]
00002e  0840              LSRS     r0,r0,#1
000030  0040              LSLS     r0,r0,#1
000032  1c40              ADDS     r0,r0,#1
000034  49ca              LDR      r1,|L2.864|
000036  63c8              STR      r0,[r1,#0x3c]
                  |L2.56|
;;;134    		         break;
000038  e0a7              B        |L2.394|
;;;135    		case 1 : if (PWM_freq==0) PWMA->POE.PWM1=0;
00003a  2d00              CMP      r5,#0
00003c  d106              BNE      |L2.76|
00003e  48c8              LDR      r0,|L2.864|
000040  6bc0              LDR      r0,[r0,#0x3c]
000042  2102              MOVS     r1,#2
000044  4388              BICS     r0,r0,r1
000046  49c6              LDR      r1,|L2.864|
000048  63c8              STR      r0,[r1,#0x3c]
00004a  e006              B        |L2.90|
                  |L2.76|
;;;136    	           else             PWMA->POE.PWM1=1;
00004c  48c4              LDR      r0,|L2.864|
00004e  6bc0              LDR      r0,[r0,#0x3c]
000050  2102              MOVS     r1,#2
000052  4388              BICS     r0,r0,r1
000054  1c80              ADDS     r0,r0,#2
000056  49c2              LDR      r1,|L2.864|
000058  63c8              STR      r0,[r1,#0x3c]
                  |L2.90|
;;;137    		         break;		
00005a  e096              B        |L2.394|
;;;138    		case 2 : if (PWM_freq==0) PWMA->POE.PWM2=0;
00005c  2d00              CMP      r5,#0
00005e  d106              BNE      |L2.110|
000060  48bf              LDR      r0,|L2.864|
000062  6bc0              LDR      r0,[r0,#0x3c]
000064  2104              MOVS     r1,#4
000066  4388              BICS     r0,r0,r1
000068  49bd              LDR      r1,|L2.864|
00006a  63c8              STR      r0,[r1,#0x3c]
00006c  e006              B        |L2.124|
                  |L2.110|
;;;139    	           else             PWMA->POE.PWM2=1;
00006e  48bc              LDR      r0,|L2.864|
000070  6bc0              LDR      r0,[r0,#0x3c]
000072  2104              MOVS     r1,#4
000074  4388              BICS     r0,r0,r1
000076  1d00              ADDS     r0,r0,#4
000078  49b9              LDR      r1,|L2.864|
00007a  63c8              STR      r0,[r1,#0x3c]
                  |L2.124|
;;;140    		         break;
00007c  e085              B        |L2.394|
;;;141    		case 3 : if (PWM_freq==0) PWMA->POE.PWM3=0;
00007e  2d00              CMP      r5,#0
000080  d106              BNE      |L2.144|
000082  48b7              LDR      r0,|L2.864|
000084  6bc0              LDR      r0,[r0,#0x3c]
000086  2108              MOVS     r1,#8
000088  4388              BICS     r0,r0,r1
00008a  49b5              LDR      r1,|L2.864|
00008c  63c8              STR      r0,[r1,#0x3c]
00008e  e006              B        |L2.158|
                  |L2.144|
;;;142    	           else             PWMA->POE.PWM3=1;
000090  48b3              LDR      r0,|L2.864|
000092  6bc0              LDR      r0,[r0,#0x3c]
000094  2108              MOVS     r1,#8
000096  4388              BICS     r0,r0,r1
000098  3008              ADDS     r0,r0,#8
00009a  49b1              LDR      r1,|L2.864|
00009c  63c8              STR      r0,[r1,#0x3c]
                  |L2.158|
;;;143    		         break;		
00009e  e074              B        |L2.394|
;;;144    		case 4 : if (PWM_freq==0) PWMB->POE.PWM0=0;
0000a0  2d00              CMP      r5,#0
0000a2  d106              BNE      |L2.178|
0000a4  48af              LDR      r0,|L2.868|
0000a6  6bc0              LDR      r0,[r0,#0x3c]
0000a8  0840              LSRS     r0,r0,#1
0000aa  0040              LSLS     r0,r0,#1
0000ac  49ad              LDR      r1,|L2.868|
0000ae  63c8              STR      r0,[r1,#0x3c]
0000b0  e006              B        |L2.192|
                  |L2.178|
;;;145    	           else             PWMB->POE.PWM0=1;
0000b2  48ac              LDR      r0,|L2.868|
0000b4  6bc0              LDR      r0,[r0,#0x3c]
0000b6  0840              LSRS     r0,r0,#1
0000b8  0040              LSLS     r0,r0,#1
0000ba  1c40              ADDS     r0,r0,#1
0000bc  49a9              LDR      r1,|L2.868|
0000be  63c8              STR      r0,[r1,#0x3c]
                  |L2.192|
;;;146    		         break;
0000c0  e063              B        |L2.394|
;;;147    		case 5 : if (PWM_freq==0) PWMB->POE.PWM1=0;
0000c2  2d00              CMP      r5,#0
0000c4  d106              BNE      |L2.212|
0000c6  48a7              LDR      r0,|L2.868|
0000c8  6bc0              LDR      r0,[r0,#0x3c]
0000ca  2102              MOVS     r1,#2
0000cc  4388              BICS     r0,r0,r1
0000ce  49a5              LDR      r1,|L2.868|
0000d0  63c8              STR      r0,[r1,#0x3c]
0000d2  e006              B        |L2.226|
                  |L2.212|
;;;148    	           else             PWMB->POE.PWM1=1;
0000d4  48a3              LDR      r0,|L2.868|
0000d6  6bc0              LDR      r0,[r0,#0x3c]
0000d8  2102              MOVS     r1,#2
0000da  4388              BICS     r0,r0,r1
0000dc  1c80              ADDS     r0,r0,#2
0000de  49a1              LDR      r1,|L2.868|
0000e0  63c8              STR      r0,[r1,#0x3c]
                  |L2.226|
;;;149    		         break;		
0000e2  e052              B        |L2.394|
;;;150    		case 6 : if (PWM_freq==0) PWMB->POE.PWM2=0;
0000e4  2d00              CMP      r5,#0
0000e6  d106              BNE      |L2.246|
0000e8  489e              LDR      r0,|L2.868|
0000ea  6bc0              LDR      r0,[r0,#0x3c]
0000ec  2104              MOVS     r1,#4
0000ee  4388              BICS     r0,r0,r1
0000f0  499c              LDR      r1,|L2.868|
0000f2  63c8              STR      r0,[r1,#0x3c]
0000f4  e006              B        |L2.260|
                  |L2.246|
;;;151    	           else             PWMB->POE.PWM2=1;
0000f6  489b              LDR      r0,|L2.868|
0000f8  6bc0              LDR      r0,[r0,#0x3c]
0000fa  2104              MOVS     r1,#4
0000fc  4388              BICS     r0,r0,r1
0000fe  1d00              ADDS     r0,r0,#4
000100  4998              LDR      r1,|L2.868|
000102  63c8              STR      r0,[r1,#0x3c]
                  |L2.260|
;;;152    		         break;
000104  e041              B        |L2.394|
;;;153    		case 7 : if (PWM_freq==0) PWMB->POE.PWM3=0;
000106  2d00              CMP      r5,#0
000108  d106              BNE      |L2.280|
00010a  4896              LDR      r0,|L2.868|
00010c  6bc0              LDR      r0,[r0,#0x3c]
00010e  2108              MOVS     r1,#8
000110  4388              BICS     r0,r0,r1
000112  4994              LDR      r1,|L2.868|
000114  63c8              STR      r0,[r1,#0x3c]
000116  e006              B        |L2.294|
                  |L2.280|
;;;154    	           else             PWMB->POE.PWM3=1;
000118  4892              LDR      r0,|L2.868|
00011a  6bc0              LDR      r0,[r0,#0x3c]
00011c  2108              MOVS     r1,#8
00011e  4388              BICS     r0,r0,r1
000120  3008              ADDS     r0,r0,#8
000122  4990              LDR      r1,|L2.868|
000124  63c8              STR      r0,[r1,#0x3c]
                  |L2.294|
;;;155    		         break;		
000126  e030              B        |L2.394|
;;;156    		default: PWMA->POE.PWM0=0;
000128  488d              LDR      r0,|L2.864|
00012a  6bc0              LDR      r0,[r0,#0x3c]
00012c  0840              LSRS     r0,r0,#1
00012e  0040              LSLS     r0,r0,#1
000130  498b              LDR      r1,|L2.864|
000132  63c8              STR      r0,[r1,#0x3c]
;;;157    		         PWMA->POE.PWM1=0;
000134  4608              MOV      r0,r1
000136  6bc0              LDR      r0,[r0,#0x3c]
000138  2102              MOVS     r1,#2
00013a  4388              BICS     r0,r0,r1
00013c  4988              LDR      r1,|L2.864|
00013e  63c8              STR      r0,[r1,#0x3c]
;;;158    						 PWMA->POE.PWM2=0;
000140  4608              MOV      r0,r1
000142  6bc0              LDR      r0,[r0,#0x3c]
000144  2104              MOVS     r1,#4
000146  4388              BICS     r0,r0,r1
000148  4985              LDR      r1,|L2.864|
00014a  63c8              STR      r0,[r1,#0x3c]
;;;159    						 PWMA->POE.PWM3=0;
00014c  4608              MOV      r0,r1
00014e  6bc0              LDR      r0,[r0,#0x3c]
000150  2108              MOVS     r1,#8
000152  4388              BICS     r0,r0,r1
000154  4982              LDR      r1,|L2.864|
000156  63c8              STR      r0,[r1,#0x3c]
;;;160    		         PWMB->POE.PWM0=0;
000158  4882              LDR      r0,|L2.868|
00015a  6bc0              LDR      r0,[r0,#0x3c]
00015c  0840              LSRS     r0,r0,#1
00015e  0040              LSLS     r0,r0,#1
000160  4980              LDR      r1,|L2.868|
000162  63c8              STR      r0,[r1,#0x3c]
;;;161    						 PWMB->POE.PWM1=0;
000164  4608              MOV      r0,r1
000166  6bc0              LDR      r0,[r0,#0x3c]
000168  2102              MOVS     r1,#2
00016a  4388              BICS     r0,r0,r1
00016c  497d              LDR      r1,|L2.868|
00016e  63c8              STR      r0,[r1,#0x3c]
;;;162    						 PWMB->POE.PWM2=0;
000170  4608              MOV      r0,r1
000172  6bc0              LDR      r0,[r0,#0x3c]
000174  2104              MOVS     r1,#4
000176  4388              BICS     r0,r0,r1
000178  497a              LDR      r1,|L2.868|
00017a  63c8              STR      r0,[r1,#0x3c]
;;;163    						 PWMB->POE.PWM3=0;
00017c  4608              MOV      r0,r1
00017e  6bc0              LDR      r0,[r0,#0x3c]
000180  2108              MOVS     r1,#8
000182  4388              BICS     r0,r0,r1
000184  4977              LDR      r1,|L2.868|
000186  63c8              STR      r0,[r1,#0x3c]
;;;164    						 break;
000188  bf00              NOP      
                  |L2.394|
00018a  bf00              NOP                            ;134
;;;165    		}
;;;166    					 
;;;167    	  // PWM setting
;;;168    	  PWM_Clock = 12000000; // Clock source = 22.1184MHz
00018c  4876              LDR      r0,|L2.872|
00018e  9003              STR      r0,[sp,#0xc]
;;;169    	  PWM_PreScaler = 5;    // clock is divided by (PreScaler + 1)
000190  2605              MOVS     r6,#5
;;;170    		
;;;171    	  PWM_ClockDivider = 2;  // 0: 1/2, 1: 1/4, 2: 1/8, 3: 1/16, 4: 1
000192  2002              MOVS     r0,#2
000194  9002              STR      r0,[sp,#8]
;;;172    
;;;173    	  if (PWM_freq==0) {
000196  2d00              CMP      r5,#0
000198  d102              BNE      |L2.416|
;;;174    		CNR = 0;
00019a  2400              MOVS     r4,#0
;;;175    		CMR = 0;
00019c  2700              MOVS     r7,#0
00019e  e016              B        |L2.462|
                  |L2.416|
;;;176    		}
;;;177    		else {
;;;178        //PWM_FreqOut = PWM_Clock / (PWM_PreScaler + 1) / PWM_ClockDivider / (PWM_CNR + 1); 
;;;179    	  CNR = PWM_Clock / PWM_freq / (PWM_PreScaler + 1) / PWM_ClockDivider - 1;
0001a0  4629              MOV      r1,r5
0001a2  9803              LDR      r0,[sp,#0xc]
0001a4  f7fffffe          BL       __aeabi_uidivmod
0001a8  1c71              ADDS     r1,r6,#1
0001aa  9000              STR      r0,[sp,#0]
0001ac  f7fffffe          BL       __aeabi_uidivmod
0001b0  9001              STR      r0,[sp,#4]
0001b2  9902              LDR      r1,[sp,#8]
0001b4  f7fffffe          BL       __aeabi_uidivmod
0001b8  1e40              SUBS     r0,r0,#1
0001ba  b284              UXTH     r4,r0
;;;180    
;;;181    	  // Duty Cycle = (CMR0+1) / (CNR0+1)
;;;182    	  CMR = (CNR +1) * PWM_duty /100  - 1;
0001bc  1c61              ADDS     r1,r4,#1
0001be  9a06              LDR      r2,[sp,#0x18]
0001c0  4351              MULS     r1,r2,r1
0001c2  4608              MOV      r0,r1
0001c4  2164              MOVS     r1,#0x64
0001c6  f7fffffe          BL       __aeabi_idivmod
0001ca  1e40              SUBS     r0,r0,#1
0001cc  b287              UXTH     r7,r0
                  |L2.462|
;;;183    		}		
;;;184    
;;;185    	  //PWM setting	  
;;;186    		switch(PWM_no) {
0001ce  9804              LDR      r0,[sp,#0x10]
0001d0  0003              MOVS     r3,r0
0001d2  f7fffffe          BL       __ARM_common_switch8
0001d6  0805              DCB      0x08,0x05
0001d8  1a2f4963          DCB      0x1a,0x2f,0x49,0x63
0001dc  788da7c1          DCB      0x78,0x8d,0xa7,0xc1
;;;187    			case 0 : PWMA->CSR.CSR0 = 0;             // diver factor = 0: 1/2, 1: 1/4, 2: 1/8, 3: 1/16, 4: 1
0001e0  485f              LDR      r0,|L2.864|
0001e2  3840              SUBS     r0,r0,#0x40
0001e4  6840              LDR      r0,[r0,#4]
0001e6  08c0              LSRS     r0,r0,#3
0001e8  00c0              LSLS     r0,r0,#3
0001ea  495d              LDR      r1,|L2.864|
0001ec  3940              SUBS     r1,r1,#0x40
0001ee  6048              STR      r0,[r1,#4]
;;;188    	             PWMA->PPR.CP01 = PWM_PreScaler; // set PreScaler
0001f0  4608              MOV      r0,r1
0001f2  6800              LDR      r0,[r0,#0]
0001f4  0a00              LSRS     r0,r0,#8
0001f6  0200              LSLS     r0,r0,#8
0001f8  b2f1              UXTB     r1,r6
0001fa  4308              ORRS     r0,r0,r1
0001fc  4958              LDR      r1,|L2.864|
0001fe  3940              SUBS     r1,r1,#0x40
000200  6008              STR      r0,[r1,#0]
;;;189    			         PWMA->CNR0 = CNR;     	 			   // set CNR
000202  4608              MOV      r0,r1
000204  60c4              STR      r4,[r0,#0xc]
;;;190    	             PWMA->CMR0 = CMR;				       // set CMR
000206  6107              STR      r7,[r0,#0x10]
;;;191    			         break;
000208  e0a7              B        |L2.858|
;;;192    			case 1 : PWMA->CSR.CSR1 = 0;             // diver factor = 0: 1/2, 1: 1/4, 2: 1/8, 3: 1/16, 4: 1
00020a  4855              LDR      r0,|L2.864|
00020c  3840              SUBS     r0,r0,#0x40
00020e  6840              LDR      r0,[r0,#4]
000210  2170              MOVS     r1,#0x70
000212  4388              BICS     r0,r0,r1
000214  4952              LDR      r1,|L2.864|
000216  3940              SUBS     r1,r1,#0x40
000218  6048              STR      r0,[r1,#4]
;;;193    	             PWMA->PPR.CP01 = PWM_PreScaler; // set PreScaler
00021a  4608              MOV      r0,r1
00021c  6800              LDR      r0,[r0,#0]
00021e  0a00              LSRS     r0,r0,#8
000220  0200              LSLS     r0,r0,#8
000222  b2f1              UXTB     r1,r6
000224  4308              ORRS     r0,r0,r1
000226  494e              LDR      r1,|L2.864|
000228  3940              SUBS     r1,r1,#0x40
00022a  6008              STR      r0,[r1,#0]
;;;194    			         PWMA->CNR1 = CNR;     	 			   // set CNR
00022c  4608              MOV      r0,r1
00022e  6184              STR      r4,[r0,#0x18]
;;;195    	             PWMA->CMR1 = CMR;				       // set CMR
000230  61c7              STR      r7,[r0,#0x1c]
;;;196    			         break;
000232  e092              B        |L2.858|
;;;197    			case 2 : PWMA->CSR.CSR2 = 0;             // diver factor = 0: 1/2, 1: 1/4, 2: 1/8, 3: 1/16, 4: 1
000234  484a              LDR      r0,|L2.864|
000236  3840              SUBS     r0,r0,#0x40
000238  6840              LDR      r0,[r0,#4]
00023a  2107              MOVS     r1,#7
00023c  0209              LSLS     r1,r1,#8
00023e  4388              BICS     r0,r0,r1
000240  4947              LDR      r1,|L2.864|
000242  3940              SUBS     r1,r1,#0x40
000244  6048              STR      r0,[r1,#4]
;;;198    	             PWMA->PPR.CP23 = PWM_PreScaler; // set PreScaler
000246  4608              MOV      r0,r1
000248  6800              LDR      r0,[r0,#0]
00024a  21ff              MOVS     r1,#0xff
00024c  0209              LSLS     r1,r1,#8
00024e  4388              BICS     r0,r0,r1
000250  0231              LSLS     r1,r6,#8
000252  22ff              MOVS     r2,#0xff
000254  0212              LSLS     r2,r2,#8
000256  4011              ANDS     r1,r1,r2
000258  4308              ORRS     r0,r0,r1
00025a  4941              LDR      r1,|L2.864|
00025c  3940              SUBS     r1,r1,#0x40
00025e  6008              STR      r0,[r1,#0]
;;;199    			         PWMA->CNR2 = CNR;     	 			   // set CNR
000260  4608              MOV      r0,r1
000262  6244              STR      r4,[r0,#0x24]
;;;200    	             PWMA->CMR2 = CMR;				       // set CMR
000264  6287              STR      r7,[r0,#0x28]
;;;201    			         break;
000266  e078              B        |L2.858|
;;;202    			case 3 : PWMA->CSR.CSR3 = 0;             // diver factor = 0: 1/2, 1: 1/4, 2: 1/8, 3: 1/16, 4: 1
000268  483d              LDR      r0,|L2.864|
00026a  3840              SUBS     r0,r0,#0x40
00026c  6840              LDR      r0,[r0,#4]
00026e  2107              MOVS     r1,#7
000270  0309              LSLS     r1,r1,#12
000272  4388              BICS     r0,r0,r1
000274  493a              LDR      r1,|L2.864|
000276  3940              SUBS     r1,r1,#0x40
000278  6048              STR      r0,[r1,#4]
;;;203    	             PWMA->PPR.CP23 = PWM_PreScaler; // set PreScaler
00027a  4608              MOV      r0,r1
00027c  6800              LDR      r0,[r0,#0]
00027e  21ff              MOVS     r1,#0xff
000280  0209              LSLS     r1,r1,#8
000282  4388              BICS     r0,r0,r1
000284  0231              LSLS     r1,r6,#8
000286  22ff              MOVS     r2,#0xff
000288  0212              LSLS     r2,r2,#8
00028a  4011              ANDS     r1,r1,r2
00028c  4308              ORRS     r0,r0,r1
00028e  4934              LDR      r1,|L2.864|
000290  3940              SUBS     r1,r1,#0x40
000292  6008              STR      r0,[r1,#0]
;;;204    			         PWMA->CNR3 = CNR;     	 			   // set CNR
000294  4608              MOV      r0,r1
000296  6304              STR      r4,[r0,#0x30]
;;;205    	             PWMA->CMR3 = CMR;				       // set CMR
000298  6347              STR      r7,[r0,#0x34]
;;;206    			         break;
00029a  e05e              B        |L2.858|
;;;207    			case 4 : PWMB->CSR.CSR0 = 0;             // diver factor = 0: 1/2, 1: 1/4, 2: 1/8, 3: 1/16, 4: 1
00029c  4831              LDR      r0,|L2.868|
00029e  3840              SUBS     r0,r0,#0x40
0002a0  6840              LDR      r0,[r0,#4]
0002a2  08c0              LSRS     r0,r0,#3
0002a4  00c0              LSLS     r0,r0,#3
0002a6  492f              LDR      r1,|L2.868|
0002a8  3940              SUBS     r1,r1,#0x40
0002aa  6048              STR      r0,[r1,#4]
;;;208    	             PWMB->PPR.CP01 = PWM_PreScaler; // set PreScaler
0002ac  4608              MOV      r0,r1
0002ae  6800              LDR      r0,[r0,#0]
0002b0  0a00              LSRS     r0,r0,#8
0002b2  0200              LSLS     r0,r0,#8
0002b4  b2f1              UXTB     r1,r6
0002b6  4308              ORRS     r0,r0,r1
0002b8  492a              LDR      r1,|L2.868|
0002ba  3940              SUBS     r1,r1,#0x40
0002bc  6008              STR      r0,[r1,#0]
;;;209    			         PWMB->CNR0 = CNR;     	 			   // set CNR
0002be  4608              MOV      r0,r1
0002c0  60c4              STR      r4,[r0,#0xc]
;;;210    	             PWMB->CMR0 = CMR;				       // set CMR
0002c2  6107              STR      r7,[r0,#0x10]
;;;211    			         break;
0002c4  e049              B        |L2.858|
;;;212    			case 5 : PWMB->CSR.CSR1 = 0;             // diver factor = 0: 1/2, 1: 1/4, 2: 1/8, 3: 1/16, 4: 1
0002c6  4827              LDR      r0,|L2.868|
0002c8  3840              SUBS     r0,r0,#0x40
0002ca  6840              LDR      r0,[r0,#4]
0002cc  2170              MOVS     r1,#0x70
0002ce  4388              BICS     r0,r0,r1
0002d0  4924              LDR      r1,|L2.868|
0002d2  3940              SUBS     r1,r1,#0x40
0002d4  6048              STR      r0,[r1,#4]
;;;213    	             PWMB->PPR.CP01 = PWM_PreScaler; // set PreScaler
0002d6  4608              MOV      r0,r1
0002d8  6800              LDR      r0,[r0,#0]
0002da  0a00              LSRS     r0,r0,#8
0002dc  0200              LSLS     r0,r0,#8
0002de  b2f1              UXTB     r1,r6
0002e0  4308              ORRS     r0,r0,r1
0002e2  4920              LDR      r1,|L2.868|
0002e4  3940              SUBS     r1,r1,#0x40
0002e6  6008              STR      r0,[r1,#0]
;;;214    			         PWMB->CNR1 = CNR;     	 			   // set CNR
0002e8  4608              MOV      r0,r1
0002ea  6184              STR      r4,[r0,#0x18]
;;;215    	             PWMB->CMR1 = CMR;				       // set CMR
0002ec  61c7              STR      r7,[r0,#0x1c]
;;;216    			         break;
0002ee  e034              B        |L2.858|
;;;217    			case 6 : PWMB->CSR.CSR2 = 0;             // diver factor = 0: 1/2, 1: 1/4, 2: 1/8, 3: 1/16, 4: 1
0002f0  481c              LDR      r0,|L2.868|
0002f2  3840              SUBS     r0,r0,#0x40
0002f4  6840              LDR      r0,[r0,#4]
0002f6  2107              MOVS     r1,#7
0002f8  0209              LSLS     r1,r1,#8
0002fa  4388              BICS     r0,r0,r1
0002fc  4919              LDR      r1,|L2.868|
0002fe  3940              SUBS     r1,r1,#0x40
000300  6048              STR      r0,[r1,#4]
;;;218    	             PWMB->PPR.CP23 = PWM_PreScaler; // set PreScaler
000302  4608              MOV      r0,r1
000304  6800              LDR      r0,[r0,#0]
000306  21ff              MOVS     r1,#0xff
000308  0209              LSLS     r1,r1,#8
00030a  4388              BICS     r0,r0,r1
00030c  0231              LSLS     r1,r6,#8
00030e  22ff              MOVS     r2,#0xff
000310  0212              LSLS     r2,r2,#8
000312  4011              ANDS     r1,r1,r2
000314  4308              ORRS     r0,r0,r1
000316  4913              LDR      r1,|L2.868|
000318  3940              SUBS     r1,r1,#0x40
00031a  6008              STR      r0,[r1,#0]
;;;219    			         PWMB->CNR2 = CNR;     	 			   // set CNR
00031c  4608              MOV      r0,r1
00031e  6244              STR      r4,[r0,#0x24]
;;;220    	             PWMB->CMR2 = CMR;				       // set CMR
000320  6287              STR      r7,[r0,#0x28]
;;;221    			         break;
000322  e01a              B        |L2.858|
;;;222    			case 7 : PWMB->CSR.CSR3 = 0;             // diver factor = 0: 1/2, 1: 1/4, 2: 1/8, 3: 1/16, 4: 1
000324  480f              LDR      r0,|L2.868|
000326  3840              SUBS     r0,r0,#0x40
000328  6840              LDR      r0,[r0,#4]
00032a  2107              MOVS     r1,#7
00032c  0309              LSLS     r1,r1,#12
00032e  4388              BICS     r0,r0,r1
000330  490c              LDR      r1,|L2.868|
000332  3940              SUBS     r1,r1,#0x40
000334  6048              STR      r0,[r1,#4]
;;;223    	             PWMB->PPR.CP23 = PWM_PreScaler; // set PreScaler
000336  4608              MOV      r0,r1
000338  6800              LDR      r0,[r0,#0]
00033a  21ff              MOVS     r1,#0xff
00033c  0209              LSLS     r1,r1,#8
00033e  4388              BICS     r0,r0,r1
000340  0231              LSLS     r1,r6,#8
000342  22ff              MOVS     r2,#0xff
000344  0212              LSLS     r2,r2,#8
000346  4011              ANDS     r1,r1,r2
000348  4308              ORRS     r0,r0,r1
00034a  4906              LDR      r1,|L2.868|
00034c  3940              SUBS     r1,r1,#0x40
00034e  6008              STR      r0,[r1,#0]
;;;224    			         PWMB->CNR3 = CNR;     	 			   // set CNR
000350  4608              MOV      r0,r1
000352  6304              STR      r4,[r0,#0x30]
;;;225    	             PWMB->CMR3 = CMR;				       // set CMR
000354  6347              STR      r7,[r0,#0x34]
;;;226    			         break;			
000356  e000              B        |L2.858|
;;;227    			default: break;
000358  bf00              NOP      
                  |L2.858|
00035a  bf00              NOP                            ;191
;;;228    	}
;;;229    }
00035c  b007              ADD      sp,sp,#0x1c
00035e  bdf0              POP      {r4-r7,pc}
;;;230    
                          ENDP

                  |L2.864|
                          DCD      0x40040040
                  |L2.868|
                          DCD      0x40140040
                  |L2.872|
                          DCD      0x00b71b00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d304              BCC      |L19.24|
                  |L19.14|
00000e  5d63              LDRB     r3,[r4,r5]
000010  005b              LSLS     r3,r3,#1
000012  18e3              ADDS     r3,r4,r3
000014  bc30              POP      {r4,r5}
000016  4718              BX       r3
                  |L19.24|
000018  461d              MOV      r5,r3
00001a  e7f8              B        |L19.14|
                          ENDP

