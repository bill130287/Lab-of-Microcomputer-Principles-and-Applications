; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\smpl_pwm_music.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\smpl_pwm_music.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\CM0\CoreSupport -I.\Include\Driver -I.\Include\NUC1xx-LB_002 -I.\Src\Driver -I.\Src\NUC1xx-LB_002 -I.\CM0\DeviceSupport\Nuvoton\NUC1xx -I.\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32F10x --omf_browse=.\obj\smpl_pwm_music.crf Smpl_PWM_Music.c]
                          THUMB

                          AREA ||i.PWM4_Init||, CODE, READONLY, ALIGN=2

                  PWM4_Init PROC
;;;34     
;;;35     void PWM4_Init(void)
000000  4813              LDR      r0,|L1.80|
;;;36     {
;;;37     	PWMB->PPR.CP01 = 49; // Divide by 1
000002  6800              LDR      r0,[r0,#0]
000004  0a00              LSRS     r0,r0,#8
000006  0200              LSLS     r0,r0,#8
000008  3031              ADDS     r0,r0,#0x31
00000a  4911              LDR      r1,|L1.80|
00000c  6008              STR      r0,[r1,#0]
;;;38     	PWMB->CSR.CSR0 = 0x4; // Divide by 1
00000e  4608              MOV      r0,r1
000010  6840              LDR      r0,[r0,#4]
000012  08c0              LSRS     r0,r0,#3
000014  00c0              LSLS     r0,r0,#3
000016  1d00              ADDS     r0,r0,#4
000018  6048              STR      r0,[r1,#4]
;;;39     	
;;;40     	PWMB->PCR.CH0MOD = 1; // PWM Timer's Mode.
00001a  4608              MOV      r0,r1
00001c  6880              LDR      r0,[r0,#8]
00001e  2108              MOVS     r1,#8
000020  4388              BICS     r0,r0,r1
000022  3008              ADDS     r0,r0,#8
000024  490a              LDR      r1,|L1.80|
000026  6088              STR      r0,[r1,#8]
;;;41     	
;;;42     	PWMB->CMR0 = 0;
000028  2000              MOVS     r0,#0
00002a  6108              STR      r0,[r1,#0x10]
;;;43     	PWMB->CNR0 = 0;
00002c  60c8              STR      r0,[r1,#0xc]
;;;44     	
;;;45     	PWMB->PCR.CH0EN = 1;  // PWM Timer Starting.
00002e  4608              MOV      r0,r1
000030  6880              LDR      r0,[r0,#8]
000032  0840              LSRS     r0,r0,#1
000034  0040              LSLS     r0,r0,#1
000036  1c40              ADDS     r0,r0,#1
000038  6088              STR      r0,[r1,#8]
;;;46     	
;;;47     	PWMB->POE.PWM0 = 1;
00003a  4805              LDR      r0,|L1.80|
00003c  3040              ADDS     r0,r0,#0x40
00003e  6bc0              LDR      r0,[r0,#0x3c]
000040  0840              LSRS     r0,r0,#1
000042  0040              LSLS     r0,r0,#1
000044  1c40              ADDS     r0,r0,#1
000046  4902              LDR      r1,|L1.80|
000048  3140              ADDS     r1,r1,#0x40
00004a  63c8              STR      r0,[r1,#0x3c]
;;;48     	
;;;49     	
;;;50     }
00004c  4770              BX       lr
;;;51     
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      0x40140000

                          AREA ||i.PWM_Freq||, CODE, READONLY, ALIGN=2

                  PWM_Freq PROC
;;;51     
;;;52     void PWM_Freq(unsigned int freq, unsigned char duty_ratio)
000000  b570              PUSH     {r4-r6,lr}
;;;53     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;54     	static unsigned short M, N;
;;;55     	
;;;56     	if(freq==0){
000006  2c00              CMP      r4,#0
000008  d104              BNE      |L2.20|
;;;57     		M=0;
00000a  490f              LDR      r1,|L2.72|
00000c  8008              STRH     r0,[r1,#0]
;;;58     		N=0;
00000e  490f              LDR      r1,|L2.76|
000010  8008              STRH     r0,[r1,#0]
000012  e010              B        |L2.54|
                  |L2.20|
;;;59     	}else{
;;;60     	// N = 50000000/(50*1*freq)
;;;61     		N = (1000000/freq) - 1;
000014  4621              MOV      r1,r4
000016  480e              LDR      r0,|L2.80|
000018  f7fffffe          BL       __aeabi_uidivmod
00001c  1e40              SUBS     r0,r0,#1
00001e  490b              LDR      r1,|L2.76|
000020  8008              STRH     r0,[r1,#0]
;;;62     		M = ((duty_ratio)*(N+1))/100-1;
000022  8809              LDRH     r1,[r1,#0]  ; N
000024  1c49              ADDS     r1,r1,#1
000026  4369              MULS     r1,r5,r1
000028  4608              MOV      r0,r1
00002a  2164              MOVS     r1,#0x64
00002c  f7fffffe          BL       __aeabi_idivmod
000030  1e40              SUBS     r0,r0,#1
000032  4905              LDR      r1,|L2.72|
000034  8008              STRH     r0,[r1,#0]
                  |L2.54|
;;;63     	}
;;;64     
;;;65     	PWMB->CMR0 = M;
000036  4804              LDR      r0,|L2.72|
000038  8800              LDRH     r0,[r0,#0]  ; M
00003a  4906              LDR      r1,|L2.84|
00003c  6108              STR      r0,[r1,#0x10]
;;;66     	PWMB->CNR0 = N;
00003e  4803              LDR      r0,|L2.76|
000040  8800              LDRH     r0,[r0,#0]  ; N
000042  60c8              STR      r0,[r1,#0xc]
;;;67     }
000044  bd70              POP      {r4-r6,pc}
;;;68     
                          ENDP

000046  0000              DCW      0x0000
                  |L2.72|
                          DCD      M
                  |L2.76|
                          DCD      N
                  |L2.80|
                          DCD      0x000f4240
                  |L2.84|
                          DCD      0x40140000

                          AREA ||i.SYS_Delay||, CODE, READONLY, ALIGN=2

                  SYS_Delay PROC
;;;16     
;;;17     void SYS_Delay(unsigned int us)
000000  2119              MOVS     r1,#0x19
;;;18     {
;;;19     		static unsigned char repeat;
;;;20     	
;;;21     		// If sys clock is 25M Hz.
;;;22     	  //
;;;23     	  repeat = 25;
000002  4a11              LDR      r2,|L3.72|
000004  7011              STRB     r1,[r2,#0]
;;;24     			SysTick->CTRL &= ~( 1 | 1 << 16 ); 
000006  4911              LDR      r1,|L3.76|
000008  6909              LDR      r1,[r1,#0x10]
00000a  4a11              LDR      r2,|L3.80|
00000c  4011              ANDS     r1,r1,r2
00000e  4a0f              LDR      r2,|L3.76|
000010  6111              STR      r1,[r2,#0x10]
;;;25     			SysTick->LOAD = us;
000012  4611              MOV      r1,r2
000014  6148              STR      r0,[r1,#0x14]
;;;26     			SysTick->VAL  = 0;
000016  2100              MOVS     r1,#0
000018  6191              STR      r1,[r2,#0x18]
;;;27     			SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
00001a  2101              MOVS     r1,#1
00001c  6111              STR      r1,[r2,#0x10]
;;;28     		while(repeat--){
00001e  e009              B        |L3.52|
                  |L3.32|
;;;29     			/* Waiting for down-count to zero */
;;;30     			while((SysTick->CTRL & (1 << 16)) == 0);
000020  bf00              NOP      
                  |L3.34|
000022  490a              LDR      r1,|L3.76|
000024  6909              LDR      r1,[r1,#0x10]
000026  2201              MOVS     r2,#1
000028  0412              LSLS     r2,r2,#16
00002a  4211              TST      r1,r2
00002c  d0f9              BEQ      |L3.34|
;;;31     			SysTick->VAL  = 0;
00002e  2100              MOVS     r1,#0
000030  4a06              LDR      r2,|L3.76|
000032  6191              STR      r1,[r2,#0x18]
                  |L3.52|
000034  4904              LDR      r1,|L3.72|
000036  780a              LDRB     r2,[r1,#0]            ;28  ; repeat
000038  7809              LDRB     r1,[r1,#0]            ;28  ; repeat
00003a  1e49              SUBS     r1,r1,#1              ;28
00003c  4b02              LDR      r3,|L3.72|
00003e  7019              STRB     r1,[r3,#0]            ;28
000040  2a00              CMP      r2,#0                 ;28
000042  d1ed              BNE      |L3.32|
;;;32     		}	
;;;33     }
000044  4770              BX       lr
;;;34     
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      repeat
                  |L3.76|
                          DCD      0xe000e000
                  |L3.80|
                          DCD      0xfffefffe

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;68     
;;;69     int main (void)
000000  b0ec              SUB      sp,sp,#0x1b0
;;;70     {
;;;71     	
;;;72       uint8_t i, duty_cycle;
;;;73     	
;;;74     	uint16_t music[72] = {
000002  2290              MOVS     r2,#0x90
000004  492a              LDR      r1,|L4.176|
000006  a848              ADD      r0,sp,#0x120
000008  f7fffffe          BL       __aeabi_memcpy4
;;;75     		E6 ,D6u,E6 ,D6u,E6 ,B5 ,D6 ,C6 ,A5 ,A5 , 0 , 0 ,
;;;76     		C5 ,E5 ,A5 ,B5 ,B5 , 0 ,C5 ,A5 ,B5 ,C6 ,C6 , 0 ,
;;;77     		E6 ,D6u,E6 ,D6u,E6 ,B5 ,D6 ,C6 ,A5 ,A5 , 0 , 0 ,
;;;78     		C5 ,E5 ,A5 ,B5 ,B5 , 0 ,E5 ,C6 ,B5 ,A5 ,A5 , 0 ,
;;;79     		B5 ,C6 ,D6 ,E6 ,E6 , 0 ,G5 ,F6 ,E6 ,D6 ,D6 , 0 ,
;;;80     		F5 ,E6 ,D6 ,C6 ,C6 , 0 ,E5 ,D6 ,C6 ,B5 ,B5 , 0 };
;;;81     	
;;;82     	uint32_t pitch[72] = {
00000c  22ff              MOVS     r2,#0xff
00000e  3221              ADDS     r2,r2,#0x21
000010  4927              LDR      r1,|L4.176|
000012  3190              ADDS     r1,r1,#0x90
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       __aeabi_memcpy4
;;;83     		P125ms, P125ms, P125ms, P125ms,	P125ms, P125ms, P125ms, P125ms,	P125ms, P125ms, P125ms, P125ms,
;;;84     		P125ms, P125ms, P125ms, P125ms,	P125ms, P125ms, P125ms, P125ms,	P125ms, P125ms, P125ms, P125ms,
;;;85     		P125ms, P125ms, P125ms, P125ms,	P125ms, P125ms, P125ms, P125ms,	P125ms, P125ms, P125ms, P125ms,
;;;86     		P250ms, P250ms, P250ms, P250ms,	P250ms, P250ms, P250ms, P250ms,	P250ms, P250ms, P250ms, P250ms,
;;;87     		P250ms, P250ms, P250ms, P250ms,	P250ms, P250ms, P250ms, P250ms,	P250ms, P250ms, P250ms, P250ms,
;;;88     		P250ms, P250ms, P250ms, P250ms,	P250ms, P250ms, P250ms, P250ms,	P250ms, P250ms, P250ms, P250ms
;;;89     	};
;;;90     		
;;;91     	UNLOCKREG();
00001a  2059              MOVS     r0,#0x59
00001c  4925              LDR      r1,|L4.180|
00001e  6008              STR      r0,[r1,#0]
000020  2016              MOVS     r0,#0x16
000022  6008              STR      r0,[r1,#0]
000024  2088              MOVS     r0,#0x88
000026  6008              STR      r0,[r1,#0]
;;;92     	DrvSYS_Open(50000000);// set System Clock to run at 50MHz.
000028  4823              LDR      r0,|L4.184|
00002a  f7fffffe          BL       DrvSYS_Open
;;;93     	SYSCLK->CLKSEL0.STCLK_S = 0x3;
00002e  4823              LDR      r0,|L4.188|
000030  6900              LDR      r0,[r0,#0x10]
000032  2138              MOVS     r1,#0x38
000034  4388              BICS     r0,r0,r1
000036  3018              ADDS     r0,r0,#0x18
000038  4920              LDR      r1,|L4.188|
00003a  6108              STR      r0,[r1,#0x10]
;;;94     	SYS->ALTMFP.PB11_PWM4 = 1; // Pinmux
00003c  481d              LDR      r0,|L4.180|
00003e  38c0              SUBS     r0,r0,#0xc0
000040  6900              LDR      r0,[r0,#0x10]
000042  2110              MOVS     r1,#0x10
000044  4388              BICS     r0,r0,r1
000046  3010              ADDS     r0,r0,#0x10
000048  491a              LDR      r1,|L4.180|
00004a  39c0              SUBS     r1,r1,#0xc0
00004c  6108              STR      r0,[r1,#0x10]
;;;95     	SYS->GPBMFP.TM3_PWM4 = 1;  // Pinmux
00004e  2005              MOVS     r0,#5
000050  0700              LSLS     r0,r0,#28
000052  6b40              LDR      r0,[r0,#0x34]
000054  0149              LSLS     r1,r1,#5
000056  4388              BICS     r0,r0,r1
000058  1840              ADDS     r0,r0,r1
00005a  2105              MOVS     r1,#5
00005c  0709              LSLS     r1,r1,#28
00005e  6348              STR      r0,[r1,#0x34]
;;;96     	SYSCLK->CLKSEL2.PWM45_S = 0x2; // PWM
000060  4816              LDR      r0,|L4.188|
000062  69c0              LDR      r0,[r0,#0x1c]
000064  2130              MOVS     r1,#0x30
000066  4388              BICS     r0,r0,r1
000068  3020              ADDS     r0,r0,#0x20
00006a  4914              LDR      r1,|L4.188|
00006c  61c8              STR      r0,[r1,#0x1c]
;;;97     	SYSCLK->APBCLK.PWM45_EN = 0x1; // PWM Con
00006e  4608              MOV      r0,r1
000070  6880              LDR      r0,[r0,#8]
000072  0349              LSLS     r1,r1,#13
000074  4388              BICS     r0,r0,r1
000076  1840              ADDS     r0,r0,r1
000078  4910              LDR      r1,|L4.188|
00007a  6088              STR      r0,[r1,#8]
;;;98     	LOCKREG();
00007c  2000              MOVS     r0,#0
00007e  490d              LDR      r1,|L4.180|
000080  6008              STR      r0,[r1,#0]
;;;99     
;;;100    	duty_cycle = 50;
000082  2532              MOVS     r5,#0x32
;;;101    	
;;;102    	PWM4_Init();
000084  f7fffffe          BL       PWM4_Init
;;;103    	
;;;104    	while(1)
000088  e010              B        |L4.172|
                  |L4.138|
;;;105    	{
;;;106    		for(i=0; i<72; i++){
00008a  2400              MOVS     r4,#0
00008c  e00c              B        |L4.168|
                  |L4.142|
;;;107    			PWM_Freq(music[i], duty_cycle);
00008e  0061              LSLS     r1,r4,#1
000090  aa48              ADD      r2,sp,#0x120
000092  5a50              LDRH     r0,[r2,r1]
000094  4629              MOV      r1,r5
000096  f7fffffe          BL       PWM_Freq
;;;108    			SYS_Delay(pitch[i]);
00009a  00a1              LSLS     r1,r4,#2
00009c  466a              MOV      r2,sp
00009e  5850              LDR      r0,[r2,r1]
0000a0  f7fffffe          BL       SYS_Delay
0000a4  1c60              ADDS     r0,r4,#1              ;106
0000a6  b2c4              UXTB     r4,r0                 ;106
                  |L4.168|
0000a8  2c48              CMP      r4,#0x48              ;106
0000aa  dbf0              BLT      |L4.142|
                  |L4.172|
0000ac  e7ed              B        |L4.138|
;;;109    		}
;;;110    	}
;;;111    }
                          ENDP

0000ae  0000              DCW      0x0000
                  |L4.176|
                          DCD      ||.constdata||
                  |L4.180|
                          DCD      0x50000100
                  |L4.184|
                          DCD      0x02faf080
                  |L4.188|
                          DCD      0x50000200

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  052704dd          DCW      0x0527,0x04dd
000004  052704dd          DCW      0x0527,0x04dd
000008  052703dc          DCW      0x0527,0x03dc
00000c  04970417          DCW      0x0497,0x0417
000010  03700370          DCW      0x0370,0x0370
000014  00000000          DCW      0x0000,0x0000
000018  020b0293          DCW      0x020b,0x0293
00001c  037003dc          DCW      0x0370,0x03dc
000020  03dc0000          DCW      0x03dc,0x0000
000024  020b0370          DCW      0x020b,0x0370
000028  03dc0417          DCW      0x03dc,0x0417
00002c  04170000          DCW      0x0417,0x0000
000030  052704dd          DCW      0x0527,0x04dd
000034  052704dd          DCW      0x0527,0x04dd
000038  052703dc          DCW      0x0527,0x03dc
00003c  04970417          DCW      0x0497,0x0417
000040  03700370          DCW      0x0370,0x0370
000044  00000000          DCW      0x0000,0x0000
000048  020b0293          DCW      0x020b,0x0293
00004c  037003dc          DCW      0x0370,0x03dc
000050  03dc0000          DCW      0x03dc,0x0000
000054  02930417          DCW      0x0293,0x0417
000058  03dc0370          DCW      0x03dc,0x0370
00005c  03700000          DCW      0x0370,0x0000
000060  03dc0417          DCW      0x03dc,0x0417
000064  04970527          DCW      0x0497,0x0527
000068  05270000          DCW      0x0527,0x0000
00006c  03100575          DCW      0x0310,0x0575
000070  05270497          DCW      0x0527,0x0497
000074  04970000          DCW      0x0497,0x0000
000078  02ba0527          DCW      0x02ba,0x0527
00007c  04970417          DCW      0x0497,0x0417
000080  04170000          DCW      0x0417,0x0000
000084  02930497          DCW      0x0293,0x0497
000088  041703dc          DCW      0x0417,0x03dc
00008c  03dc0000          DCW      0x03dc,0x0000
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0001e848
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090
                          DCD      0x0003d090

                          AREA ||.data||, DATA, ALIGN=1

                  repeat
000000  0000              DCB      0x00,0x00
                  M
000002  0000              DCB      0x00,0x00
                  N
000004  0000              DCB      0x00,0x00

                  __ARM_use_no_argv EQU 0
