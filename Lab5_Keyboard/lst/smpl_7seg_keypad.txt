; generated by ARM C/C++ Compiler, 5.03 [Build 76]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\smpl_7seg_keypad.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\smpl_7seg_keypad.d --cpu=Cortex-M0 --apcs=interwork -O0 -I.\CM0\DeviceSupport\Nuvoton\NUC1xx -I.\Include -I.\Include\Driver -I.\ -I.\Src\Driver -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Nuvoton\NUC1xx --omf_browse=.\obj\smpl_7seg_keypad.crf Smpl_7seg_Keypad.c]
                          THUMB

                          AREA ||i.OpenKey_Pad||, CODE, READONLY, ALIGN=1

                  OpenKey_Pad PROC
;;;21     
;;;22     void OpenKey_Pad(void)
000000  b510              PUSH     {r4,lr}
;;;23     {
;;;24     	uint8_t i;
;;;25     	/* Initial key pad */
;;;26     	for(i=0;i<6;i++)
000002  2400              MOVS     r4,#0
000004  e006              B        |L1.20|
                  |L1.6|
;;;27     	DrvGPIO_Open(E_GPA, i, E_IO_QUASI);
000006  2203              MOVS     r2,#3
000008  4621              MOV      r1,r4
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       DrvGPIO_Open
000010  1c60              ADDS     r0,r4,#1              ;26
000012  b2c4              UXTB     r4,r0                 ;26
                  |L1.20|
000014  2c06              CMP      r4,#6                 ;26
000016  dbf6              BLT      |L1.6|
;;;28     }
000018  bd10              POP      {r4,pc}
;;;29     
                          ENDP


                          AREA ||i.Scan_key||, CODE, READONLY, ALIGN=2

                  Scan_key PROC
;;;29     
;;;30     uint8_t Scan_key(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;31     {
;;;32     	uint8_t act[4]={0x3b, 0x3d, 0x3e};    
000002  481d              LDR      r0,|L2.120|
000004  6800              LDR      r0,[r0,#0]  ; <Data1>
000006  9000              STR      r0,[sp,#0]
;;;33     	uint8_t i,temp,pin;
;;;34     
;;;35     	for(i=0;i<3;i++)
000008  2400              MOVS     r4,#0
00000a  e031              B        |L2.112|
                  |L2.12|
;;;36     	{
;;;37     		temp=act[i];
00000c  4668              MOV      r0,sp
00000e  5d06              LDRB     r6,[r0,r4]
;;;38     		for(pin=0;pin<6;pin++)
000010  2500              MOVS     r5,#0
000012  e00e              B        |L2.50|
                  |L2.20|
;;;39     		{
;;;40     			if((temp&0x01)==0x01)
000014  07f0              LSLS     r0,r6,#31
000016  0fc0              LSRS     r0,r0,#31
000018  d004              BEQ      |L2.36|
;;;41     				DrvGPIO_SetBit(E_GPA,pin);
00001a  4629              MOV      r1,r5
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       DrvGPIO_SetBit
000022  e003              B        |L2.44|
                  |L2.36|
;;;42     			else
;;;43     				DrvGPIO_ClrBit(E_GPA,pin);
000024  4629              MOV      r1,r5
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       DrvGPIO_ClrBit
                  |L2.44|
;;;44     			temp>>=1;
00002c  1076              ASRS     r6,r6,#1
00002e  1c68              ADDS     r0,r5,#1              ;38
000030  b2c5              UXTB     r5,r0                 ;38
                  |L2.50|
000032  2d06              CMP      r5,#6                 ;38
000034  dbee              BLT      |L2.20|
;;;45     			
;;;46     		}
;;;47     //		delay();
;;;48     		if(DrvGPIO_GetBit(E_GPA,3)==0)
000036  2103              MOVS     r1,#3
000038  2000              MOVS     r0,#0
00003a  f7fffffe          BL       DrvGPIO_GetBit
00003e  2800              CMP      r0,#0
000040  d102              BNE      |L2.72|
;;;49     			return(i+1);
000042  1c60              ADDS     r0,r4,#1
000044  b2c0              UXTB     r0,r0
                  |L2.70|
;;;50     		if(DrvGPIO_GetBit(E_GPA,4)==0)
;;;51     			return(i+4);
;;;52     		if(DrvGPIO_GetBit(E_GPA,5)==0)
;;;53     			return(i+7);
;;;54     	}
;;;55     		return 0;
;;;56     }
000046  bdf8              POP      {r3-r7,pc}
                  |L2.72|
000048  2104              MOVS     r1,#4                 ;50
00004a  2000              MOVS     r0,#0                 ;50
00004c  f7fffffe          BL       DrvGPIO_GetBit
000050  2800              CMP      r0,#0                 ;50
000052  d102              BNE      |L2.90|
000054  1d20              ADDS     r0,r4,#4              ;51
000056  b2c0              UXTB     r0,r0                 ;51
000058  e7f5              B        |L2.70|
                  |L2.90|
00005a  2105              MOVS     r1,#5                 ;52
00005c  2000              MOVS     r0,#0                 ;52
00005e  f7fffffe          BL       DrvGPIO_GetBit
000062  2800              CMP      r0,#0                 ;52
000064  d102              BNE      |L2.108|
000066  1de0              ADDS     r0,r4,#7              ;53
000068  b2c0              UXTB     r0,r0                 ;53
00006a  e7ec              B        |L2.70|
                  |L2.108|
00006c  1c60              ADDS     r0,r4,#1              ;35
00006e  b2c4              UXTB     r4,r0                 ;35
                  |L2.112|
000070  2c03              CMP      r4,#3                 ;35
000072  dbcb              BLT      |L2.12|
000074  2000              MOVS     r0,#0                 ;55
000076  e7e6              B        |L2.70|
;;;57     
                          ENDP

                  |L2.120|
                          DCD      ||.constdata||

                          AREA ||i.add||, CODE, READONLY, ALIGN=2

                  add PROC
;;;57     
;;;58     void add(char n1)
000000  4906              LDR      r1,|L3.28|
;;;59     {
;;;60     
;;;61     	seg[3] = seg[2];
000002  7889              LDRB     r1,[r1,#2]  ; seg
000004  4a05              LDR      r2,|L3.28|
000006  70d1              STRB     r1,[r2,#3]
;;;62     	seg[2] = seg[1];
000008  4611              MOV      r1,r2
00000a  7849              LDRB     r1,[r1,#1]  ; seg
00000c  7091              STRB     r1,[r2,#2]
;;;63     	seg[1] = seg[0];
00000e  4611              MOV      r1,r2
000010  7809              LDRB     r1,[r1,#0]  ; seg
000012  7051              STRB     r1,[r2,#1]
;;;64     	seg[0] = n1;
000014  4611              MOV      r1,r2
000016  7008              STRB     r0,[r1,#0]
;;;65     
;;;66     }
000018  4770              BX       lr
;;;67     
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      ||seg||

                          AREA ||i.delay||, CODE, READONLY, ALIGN=1

                  delay PROC
;;;15     
;;;16     void delay(void)
000000  2000              MOVS     r0,#0
;;;17     {
;;;18     	int j;
;;;19     	for(j=0;j<1000;j++);
000002  e000              B        |L4.6|
                  |L4.4|
000004  1c40              ADDS     r0,r0,#1
                  |L4.6|
000006  217d              MOVS     r1,#0x7d
000008  00c9              LSLS     r1,r1,#3
00000a  4288              CMP      r0,r1
00000c  dbfa              BLT      |L4.4|
;;;20     }
00000e  4770              BX       lr
;;;21     
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;81     
;;;82     int32_t main (void)
000000  2059              MOVS     r0,#0x59
;;;83     {	
;;;84     	int8_t number,temp_num,i;
;;;85     	
;;;86     	UNLOCKREG();
000002  4913              LDR      r1,|L5.80|
000004  6008              STR      r0,[r1,#0]
000006  2016              MOVS     r0,#0x16
000008  6008              STR      r0,[r1,#0]
00000a  2088              MOVS     r0,#0x88
00000c  6008              STR      r0,[r1,#0]
;;;87       DrvSYS_Open(48000000);
00000e  4811              LDR      r0,|L5.84|
000010  f7fffffe          BL       DrvSYS_Open
;;;88     	LOCKREG();
000014  2000              MOVS     r0,#0
000016  490e              LDR      r1,|L5.80|
000018  6008              STR      r0,[r1,#0]
;;;89     	
;;;90     	number = 1;
00001a  2501              MOVS     r5,#1
;;;91     	OpenKey_Pad();					 	
00001c  f7fffffe          BL       OpenKey_Pad
;;;92     	
;;;93     	close_seven_segment();
000020  f7fffffe          BL       close_seven_segment
;;;94     	
;;;95     	while(1)
000024  e012              B        |L5.76|
                  |L5.38|
;;;96     	{				
;;;97     			number = Scan_key();
000026  f7fffffe          BL       Scan_key
00002a  b245              SXTB     r5,r0
;;;98     			temp_num = number;		
00002c  462c              MOV      r4,r5
;;;99     			while(number == temp_num)
00002e  e004              B        |L5.58|
                  |L5.48|
;;;100    			{
;;;101    				number = Scan_key();				
000030  f7fffffe          BL       Scan_key
000034  b245              SXTB     r5,r0
;;;102    				show();
000036  f7fffffe          BL       show
                  |L5.58|
00003a  42a5              CMP      r5,r4                 ;99
00003c  d0f8              BEQ      |L5.48|
;;;103    			}
;;;104    			
;;;105    			if(temp_num != 0) add(temp_num);	
00003e  2c00              CMP      r4,#0
000040  d002              BEQ      |L5.72|
000042  b2e0              UXTB     r0,r4
000044  f7fffffe          BL       add
                  |L5.72|
;;;106    			
;;;107    			show();
000048  f7fffffe          BL       show
                  |L5.76|
00004c  e7eb              B        |L5.38|
;;;108    	}
;;;109    	
;;;110    }
                          ENDP

00004e  0000              DCW      0x0000
                  |L5.80|
                          DCD      0x50000100
                  |L5.84|
                          DCD      0x02dc6c00

                          AREA ||i.show||, CODE, READONLY, ALIGN=2

                  show PROC
;;;67     
;;;68     void show(void)
000000  b510              PUSH     {r4,lr}
;;;69     {
;;;70     	int i;
;;;71     	
;;;72     	for(i = 0 ; i<4 ; i++)
000002  2400              MOVS     r4,#0
000004  e00b              B        |L6.30|
                  |L6.6|
;;;73     	{
;;;74     		show_seven_segment(i,seg[i]);
000006  4a07              LDR      r2,|L6.36|
000008  5d11              LDRB     r1,[r2,r4]
00000a  b2e0              UXTB     r0,r4
00000c  f7fffffe          BL       show_seven_segment
;;;75     		
;;;76     		DrvSYS_Delay(4000);
000010  207d              MOVS     r0,#0x7d
000012  0140              LSLS     r0,r0,#5
000014  f7fffffe          BL       DrvSYS_Delay
;;;77     		close_seven_segment();
000018  f7fffffe          BL       close_seven_segment
00001c  1c64              ADDS     r4,r4,#1              ;72
                  |L6.30|
00001e  2c04              CMP      r4,#4                 ;72
000020  dbf1              BLT      |L6.6|
;;;78     	}
;;;79     }
000022  bd10              POP      {r4,pc}
;;;80     
                          ENDP

                  |L6.36|
                          DCD      ||seg||

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  3b3d3e00          DCB      0x3b,0x3d,0x3e,0x00

                          AREA ||.data||, DATA, ALIGN=0

                  ||seg||
000000  00000000          DCB      0x00,0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "Smpl_7seg_Keypad.c"
	AREA ||.rev16_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_Smpl_7seg_Keypad_c_seg____REV16|
#line 129 "C:\\Keil\\ARM\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_Smpl_7seg_Keypad_c_seg____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE, READONLY
	THUMB
	EXPORT |__asm___18_Smpl_7seg_Keypad_c_seg____REVSH|
#line 144
|__asm___18_Smpl_7seg_Keypad_c_seg____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
